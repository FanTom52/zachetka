// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–ª–∞—Å—Å GradebookApp
if (typeof GradebookApp === 'undefined') {

class GradebookApp {
    constructor() {
        this.currentUser = null;
        this.authToken = localStorage.getItem('authToken');
        this.currentSection = 'dashboard';
        this.init();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await this.checkAuthStatus();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.initEventListeners();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    async checkAuthStatus() {
        const savedToken = localStorage.getItem('authToken');
        const savedUser = localStorage.getItem('currentUser');
        
        if (savedToken && savedUser) {
            this.authToken = savedToken;
            this.currentUser = JSON.parse(savedUser);
            this.showMainApp();
            return true;
        }
        return false;
    }

    initEventListeners() {
        // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.addEventListener('click', (e) => {
            if (e.target.matches('.nav-link')) {
                e.preventDefault();
                const section = e.target.getAttribute('data-section');
                if (section) {
                    this.showSection(section);
                }
            }
            
            // –í—ã—Ö–æ–¥
            if (e.target.closest('[data-action="logout"]')) {
                e.preventDefault();
                this.logout();
            }
        });
    }

    async handleLogin(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;

        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, password })
            });

            const data = await response.json();

            if (data.success) {
                this.authToken = data.token;
                this.currentUser = data.user;
                
                localStorage.setItem('authToken', data.token);
                localStorage.setItem('currentUser', JSON.stringify(data.user));
                
                this.showMainApp();
                this.showNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', 'success');
            } else {
                this.showNotification(data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        }
    }

    showMainApp() {
        document.getElementById('loginPage').classList.add('d-none');
        document.getElementById('mainApp').classList.remove('d-none');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userInfo = this.currentUser.name || this.currentUser.username;
        const role = this.currentUser.role;
        document.getElementById('userInfoSidebar').textContent = `${userInfo} (${role})`;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        this.updateNavigationForRole();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.showSection('dashboard');
    }

    updateNavigationForRole() {
        const role = this.currentUser.role;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è
        const elementsToHide = {
            student: ['studentsNavItem'],
            teacher: [],
            admin: []
        };

        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        const elements = elementsToHide[role] || [];
        elements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                element.style.display = 'none';
            }
        });
    }

    async showSection(sectionName) {
        console.log(`üìÇ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–∞–∑–¥–µ–ª: ${sectionName}`);
        this.currentSection = sectionName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        
        const activeLink = document.querySelector(`[data-section="${sectionName}"]`);
        if (activeLink) {
            activeLink.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titles = {
            dashboard: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            students: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏',
            grades: '–ñ—É—Ä–Ω–∞–ª –æ—Ü–µ–Ω–æ–∫',
            statistics: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏',
            schedule: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π',
            attendance: '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å'
        };
        
        document.getElementById('pageTitle').textContent = titles[sectionName] || sectionName;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞
        const content = document.getElementById('sectionsContent');
        content.innerHTML = this.getSectionLoader();

        try {
            let sectionHTML = '';
            
            switch(sectionName) {
                case 'dashboard':
                    sectionHTML = await this.loadDashboard();
                    break;
                case 'students':
                    sectionHTML = await this.loadStudentsSection();
                    break;
                case 'grades':
                    sectionHTML = await this.loadGradesSection();
                    break;
                case 'statistics':
                    sectionHTML = await this.loadStatisticsSection();
                    break;
                case 'schedule':
                    sectionHTML = await this.loadScheduleSection();
                    break;
                case 'attendance':
                    sectionHTML = await this.loadAttendanceSection();
                    break;
                default:
                    sectionHTML = this.getSectionNotImplemented(sectionName);
            }
            
            content.innerHTML = sectionHTML;
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ ${sectionName}:`, error);
            content.innerHTML = this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞');
        }
    }

    getSectionLoader() {
        return `
            <div class="d-flex justify-content-center align-items-center" style="height: 400px">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                </div>
            </div>
        `;
    }

    getErrorContent(message) {
        return `
            <div class="alert alert-danger">
                <h5>‚ùå –û—à–∏–±–∫–∞</h5>
                <p>${message}</p>
                <button class="btn btn-primary btn-sm" onclick="app.showSection('${this.currentSection}')">
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
            </div>
        `;
    }

    getSectionNotImplemented(sectionName) {
        return `
            <div class="card">
                <div class="card-body text-center py-5">
                    <i class="fas fa-tools fa-3x text-muted mb-3"></i>
                    <h4>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h4>
                    <p class="text-muted">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "${sectionName}" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.</p>
                </div>
            </div>
        `;
    }

    async loadDashboard() {
        try {
            const response = await this.apiRequest('/api/statistics/overview');
            
            if (response.success) {
                const stats = response.data;
                return this.renderDashboard(stats);
            } else {
                return this.getErrorContent(response.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
        }
    }

    renderDashboard(stats) {
        return `
            <div class="row">
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card stat-card border-start border-primary border-4">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs fw-bold text-primary text-uppercase mb-1">–°—Ç—É–¥–µ–Ω—Ç—ã</div>
                                    <div class="h5 mb-0 fw-bold text-gray-800">${stats.students || 0}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-users fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card stat-card border-start border-success border-4">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs fw-bold text-success text-uppercase mb-1">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</div>
                                    <div class="h5 mb-0 fw-bold text-gray-800">${stats.teachers || 0}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-chalkboard-teacher fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card stat-card border-start border-info border-4">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs fw-bold text-info text-uppercase mb-1">–ü—Ä–µ–¥–º–µ—Ç—ã</div>
                                    <div class="h5 mb-0 fw-bold text-gray-800">${stats.subjects || 0}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-book fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card stat-card border-start border-warning border-4">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs fw-bold text-warning text-uppercase mb-1">–û—Ü–µ–Ω–∫–∏</div>
                                    <div class="h5 mb-0 fw-bold text-gray-800">${stats.grades || 0}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-star fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">üéØ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-primary text-start" onclick="app.showSection('grades')">
                                    <i class="fas fa-book me-2"></i>–ñ—É—Ä–Ω–∞–ª –æ—Ü–µ–Ω–æ–∫
                                </button>
                                ${this.currentUser.role !== 'student' ? `
                                    <button class="btn btn-outline-success text-start" onclick="app.showSection('students')">
                                        <i class="fas fa-users me-2"></i>–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                                    </button>
                                ` : ''}
                                <button class="btn btn-outline-info text-start" onclick="app.showSection('statistics')">
                                    <i class="fas fa-chart-bar me-2"></i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                                </button>
                                <button class="btn btn-outline-warning text-start" onclick="app.showSection('schedule')">
                                    <i class="fas fa-calendar-alt me-2"></i>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                                </button>
                                <button class="btn btn-outline-secondary text-start" onclick="app.showSection('attendance')">
                                    <i class="fas fa-clipboard-check me-2"></i>–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // üë• –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
    async loadStudentsSection() {
        if (this.currentUser.role === 'student') {
            return this.getErrorContent('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞');
        }

        try {
            const response = await this.apiRequest('/api/students');
            
            if (response.success) {
                return this.renderStudentsList(response.data.students);
            } else {
                return this.getErrorContent(response.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤');
        }
    }

    // üé® –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    renderStudentsList(students) {
        const canAddStudent = this.currentUser.role === 'admin';

        return `
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏</h4>
                    ${canAddStudent ? `
                        <button class="btn btn-light btn-sm" onclick="app.showAddStudentForm()">
                            <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
                        </button>
                    ` : ''}
                </div>
                <div class="card-body">
                    ${!students || students.length === 0 ? `
                        <div class="alert alert-info">
                            <h5>üìù –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h5>
                            <p class="mb-0">–°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
                        </div>
                    ` : `
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>–§–ò–û</th>
                                        <th>–ì—Ä—É–ø–ø–∞</th>
                                        <th>–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞</th>
                                        <th>Email</th>
                                        <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                        ${canAddStudent ? `<th>–î–µ–π—Å—Ç–≤–∏—è</th>` : ''}
                                    </tr>
                                </thead>
                                <tbody>
                                    ${students.map(student => `
                                        <tr>
                                            <td>${student.name}</td>
                                            <td>${student.group_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
                                            <td><code>${student.student_card}</code></td>
                                            <td>${student.email || '<span class="text-muted">–ù–µ —É–∫–∞–∑–∞–Ω</span>'}</td>
                                            <td>${student.phone || '<span class="text-muted">–ù–µ —É–∫–∞–∑–∞–Ω</span>'}</td>
                                            ${canAddStudent ? `
                                                <td>
                                                    <button class="btn btn-sm btn-outline-warning" onclick="app.editStudent(${student.id})">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                </td>
                                            ` : ''}
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    `}
                </div>
            </div>
        `;
    }

    // ‚ûï –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    async showAddStudentForm() {
        try {
            const groupsResponse = await this.apiRequest('/api/groups');
            
            if (!groupsResponse.success) {
                this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø', 'error');
                return;
            }

            const modalContent = `
                <form id="addStudentForm">
                    <div class="mb-3">
                        <label class="form-label">–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞</label>
                        <input type="text" class="form-control" id="studentName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">–ì—Ä—É–ø–ø–∞</label>
                        <select class="form-select" id="studentGroup" required>
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É...</option>
                            ${(groupsResponse.data || []).map(group => 
                                `<option value="${group.id}">${group.name}</option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞</label>
                        <input type="text" class="form-control" id="studentCard" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="studentEmail">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                        <input type="tel" class="form-control" id="studentPhone">
                    </div>
                </form>
            `;

            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modalId = 'addStudentModal';
            let modal = document.getElementById(modalId);
            
            if (!modal) {
                modal = document.createElement('div');
                modal.id = modalId;
                modal.className = 'modal fade';
                modal.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body" id="addStudentModalBody">
                                ${modalContent}
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                                <button type="button" class="btn btn-primary" onclick="app.addStudent()">–î–æ–±–∞–≤–∏—Ç—å</button>
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
            } else {
                document.getElementById('addStudentModalBody').innerHTML = modalContent;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã', 'error');
        }
    }

    // üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    async addStudent() {
        const formData = {
            name: document.getElementById('studentName').value,
            group_id: document.getElementById('studentGroup').value,
            student_card: document.getElementById('studentCard').value,
            email: document.getElementById('studentEmail').value,
            phone: document.getElementById('studentPhone').value
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!formData.name || !formData.group_id || !formData.student_card) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–ò–û, –≥—Ä—É–ø–ø–∞, –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞', 'error');
            return;
        }

        try {
            const response = await this.apiRequest('/api/students', {
                method: 'POST',
                body: JSON.stringify(formData)
            });

            if (response.success) {
                this.showNotification(response.message, 'success');
                const modal = document.getElementById('addStudentModal');
                if (modal) {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) bsModal.hide();
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                this.showSection('students');
            } else {
                this.showNotification(response.error, 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞', 'error');
        }
    }

    // ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    editStudent(studentId) {
        this.showNotification(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: ${studentId} - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`, 'info');
    }

    async loadGradesSection() {
        if (this.currentUser.role === 'student') {
            return await this.loadStudentGrades();
        } else if (this.currentUser.role === 'teacher' || this.currentUser.role === 'admin') {
            return await this.loadTeacherGrades();
        } else {
            return this.getSectionNotImplemented('–ñ—É—Ä–Ω–∞–ª –æ—Ü–µ–Ω–æ–∫');
        }
    }

    // üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    async loadTeacherGrades() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
            const [groupsResponse, subjectsResponse] = await Promise.all([
                this.apiRequest('/api/groups'),
                this.apiRequest('/api/subjects')
            ]);

            if (!groupsResponse.success || !subjectsResponse.success) {
                return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            }

            return `
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0">üë®‚Äçüè´ –ñ—É—Ä–Ω–∞–ª –æ—Ü–µ–Ω–æ–∫</h4>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <label class="form-label">–ì—Ä—É–ø–ø–∞</label>
                                <select class="form-select" id="gradeGroupSelect">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É...</option>
                                    ${(groupsResponse.data || []).map(group => 
                                        `<option value="${group.id}">${group.name}</option>`
                                    ).join('')}
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">–ü—Ä–µ–¥–º–µ—Ç</label>
                                <select class="form-select" id="gradeSubjectSelect">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...</option>
                                    ${(subjectsResponse.data || []).map(subject => 
                                        `<option value="${subject.id}">${subject.name}</option>`
                                    ).join('')}
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">&nbsp;</label>
                                <button class="btn btn-primary w-100" onclick="app.loadGradebook()">
                                    <i class="fas fa-search"></i> –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å
                                </button>
                            </div>
                        </div>
                        
                        <div id="gradebookResults">
                            <div class="alert alert-info">
                                <h6>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h6>
                                <p class="mb-0">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏.</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞');
        }
    }

    // üìä –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏
    async loadGradebook() {
        const groupId = document.getElementById('gradeGroupSelect')?.value;
        const subjectId = document.getElementById('gradeSubjectSelect')?.value;
        
        if (!groupId || !subjectId) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏ –ø—Ä–µ–¥–º–µ—Ç', 'error');
            return;
        }
        
        const resultsDiv = document.getElementById('gradebookResults');
        if (!resultsDiv) return;
        
        resultsDiv.innerHTML = this.getSectionLoader();

        try {
            const response = await this.apiRequest(`/api/grades/gradebook/${groupId}/${subjectId}`);
            
            if (response.success) {
                resultsDiv.innerHTML = this.renderGradebook(response.data);
            } else {
                resultsDiv.innerHTML = this.getErrorContent(response.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–¥–æ–º–æ—Å—Ç–∏:', error);
            resultsDiv.innerHTML = this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–¥–æ–º–æ—Å—Ç–∏');
        }
    }

    // üé® –†–µ–Ω–¥–µ—Ä –≤–µ–¥–æ–º–æ—Å—Ç–∏
    renderGradebook(data) {
        if (!data || !data.students) {
            return this.getErrorContent('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }

        const { group, subject, students } = data;

        return `
            <div class="card">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">–í–µ–¥–æ–º–æ—Å—Ç—å: ${group || '–ì—Ä—É–ø–ø–∞'} - ${subject || '–ü—Ä–µ–¥–º–µ—Ç'}</h5>
                    <button class="btn btn-light btn-sm" onclick="app.exportGradebook()">
                        <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>–°—Ç—É–¥–µ–Ω—Ç</th>
                                    <th>–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞</th>
                                    <th>–û—Ü–µ–Ω–∫–∞</th>
                                    <th>–¢–∏–ø</th>
                                    <th>–î–∞—Ç–∞</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${students.map(student => `
                                    <tr>
                                        <td>${student.student_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                                        <td><code>${student.student_card || '‚Äî'}</code></td>
                                        <td>
                                            ${student.grade ? `
                                                <span class="badge ${this.getGradeBadgeClass(student.grade)}">
                                                    ${student.grade}
                                                </span>
                                            ` : '<span class="text-muted">‚Äî</span>'}
                                        </td>
                                        <td>${student.grade_type ? this.getGradeTypeText(student.grade_type) : '‚Äî'}</td>
                                        <td>${student.date ? new Date(student.date).toLocaleDateString('ru-RU') : '‚Äî'}</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    onclick="app.showGradeModal(${student.student_id || student.id}, ${student.grade || 'null'}, '${student.grade_type || ''}')">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;
    }

    // üìù –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
    showGradeModal(studentId, currentGrade, gradeType) {
        const subjectId = document.getElementById('gradeSubjectSelect')?.value;
        if (!subjectId) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', 'error');
            return;
        }
        
        const modalContent = `
            <form id="gradeForm">
                <div class="mb-3">
                    <label class="form-label">–û—Ü–µ–Ω–∫–∞</label>
                    <select class="form-select" id="gradeValue" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É</option>
                        <option value="5" ${currentGrade === 5 ? 'selected' : ''}>5 - –û—Ç–ª–∏—á–Ω–æ</option>
                        <option value="4" ${currentGrade === 4 ? 'selected' : ''}>4 - –•–æ—Ä–æ—à–æ</option>
                        <option value="3" ${currentGrade === 3 ? 'selected' : ''}>3 - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ</option>
                        <option value="2" ${currentGrade === 2 ? 'selected' : ''}>2 - –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">–¢–∏–ø —Ä–∞–±–æ—Ç—ã</label>
                    <select class="form-select" id="gradeType" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                        <option value="exam" ${gradeType === 'exam' ? 'selected' : ''}>–≠–∫–∑–∞–º–µ–Ω</option>
                        <option value="test" ${gradeType === 'test' ? 'selected' : ''}>–ó–∞—á—ë—Ç</option>
                        <option value="coursework" ${gradeType === 'coursework' ? 'selected' : ''}>–ö—É—Ä—Å–æ–≤–∞—è</option>
                        <option value="practice" ${gradeType === 'practice' ? 'selected' : ''}>–ü—Ä–∞–∫—Ç–∏–∫–∞</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">–î–∞—Ç–∞</label>
                    <input type="date" class="form-control" id="gradeDate" value="${new Date().toISOString().split('T')[0]}" required>
                </div>
                <input type="hidden" id="gradeStudentId" value="${studentId}">
                <input type="hidden" id="gradeSubjectId" value="${subjectId}">
            </form>
        `;

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modalId = 'gradeModal';
        let modal = document.getElementById(modalId);
        
        if (!modal) {
            modal = document.createElement('div');
            modal.id = modalId;
            modal.className = 'modal fade';
            modal.innerHTML = `
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">${currentGrade ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É' : '–í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É'}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body" id="gradeModalBody">
                            ${modalContent}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                            <button type="button" class="btn btn-primary" onclick="app.saveGrade()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        } else {
            document.getElementById('gradeModalBody').innerHTML = modalContent;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    async saveGrade() {
        const formData = {
            student_id: document.getElementById('gradeStudentId')?.value,
            subject_id: document.getElementById('gradeSubjectId')?.value,
            grade: parseInt(document.getElementById('gradeValue')?.value),
            grade_type: document.getElementById('gradeType')?.value,
            date: document.getElementById('gradeDate')?.value
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!formData.student_id || !formData.subject_id || !formData.grade || !formData.grade_type || !formData.date) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        try {
            const response = await this.apiRequest('/api/grades', {
                method: 'POST',
                body: JSON.stringify(formData)
            });

            if (response.success) {
                this.showNotification(response.message, 'success');
                const modal = document.getElementById('gradeModal');
                if (modal) {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) bsModal.hide();
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–¥–æ–º–æ—Å—Ç—å
                this.loadGradebook();
            } else {
                this.showNotification(response.error, 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏', 'error');
        }
    }

    async loadStudentGrades() {
        try {
            const studentId = this.currentUser.student_id || this.currentUser.id;
            const response = await this.apiRequest(`/api/grades/student/${studentId}`);
            
            if (response.success) {
                return this.renderStudentGrades(response.data);
            } else {
                return this.getErrorContent(response.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫');
        }
    }

    renderStudentGrades(grades) {
        if (!grades || grades.length === 0) {
            return `
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">üìö –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏</h4>
                    </div>
                    <div class="card-body text-center py-5">
                        <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                        <h5>–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</h5>
                        <p class="text-muted">–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏—Ö –≤—ã—Å—Ç–∞–≤—è—Ç.</p>
                    </div>
                </div>
            `;
        }

        const validGrades = grades.filter(grade => grade && typeof grade.grade === 'number');
        const averageGrade = validGrades.length > 0 
            ? (validGrades.reduce((sum, grade) => sum + grade.grade, 0) / validGrades.length).toFixed(2)
            : '0.00';

        return `
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">üìö –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏</h4>
                    <span class="badge bg-light text-dark fs-6">
                        –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: <strong>${averageGrade}</strong>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                                    <th>–û—Ü–µ–Ω–∫–∞</th>
                                    <th>–¢–∏–ø —Ä–∞–±–æ—Ç—ã</th>
                                    <th>–î–∞—Ç–∞</th>
                                    <th>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${grades.map(grade => grade ? `
                                    <tr>
                                        <td>${grade.subject_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                                        <td>
                                            <span class="badge ${this.getGradeBadgeClass(grade.grade)}">
                                                ${grade.grade}
                                            </span>
                                        </td>
                                        <td>${this.getGradeTypeText(grade.grade_type)}</td>
                                        <td>${grade.date ? new Date(grade.date).toLocaleDateString('ru-RU') : '‚Äî'}</td>
                                        <td>${grade.teacher_name || '‚Äî'}</td>
                                    </tr>
                                ` : '').join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;
    }

    async loadStatisticsSection() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const [groupsStats, subjectsStats, gradesDistribution, monthlyStats] = await Promise.all([
                this.apiRequest('/api/statistics/groups'),
                this.apiRequest('/api/statistics/subjects'),
                this.apiRequest('/api/statistics/grades-distribution'),
                this.apiRequest('/api/statistics/monthly')
            ]);

            if (!groupsStats.success || !subjectsStats.success || !gradesDistribution.success || !monthlyStats.success) {
                return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }

            return this.renderStatistics(
                groupsStats.data || [],
                subjectsStats.data || [],
                gradesDistribution.data || [],
                monthlyStats.data || []
            );

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }

    // üìä –†–µ–Ω–¥–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    renderStatistics(groupsStats, subjectsStats, gradesDistribution, monthlyStats) {
        return `
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º -->
                        <div class="col-md-6">
                            <h5>üìà –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º</h5>
                            ${groupsStats.length > 0 ? `
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>–ì—Ä—É–ø–ø–∞</th>
                                                <th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                                                <th>–°—Ç—É–¥–µ–Ω—Ç–æ–≤</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${groupsStats.map(group => `
                                                <tr>
                                                    <td>${group.group_name}</td>
                                                    <td>
                                                        <span class="badge ${this.getGradeBadgeClass(Math.round(group.average_grade))}">
                                                            ${group.average_grade ? group.average_grade.toFixed(2) : '0.00'}
                                                        </span>
                                                    </td>
                                                    <td>${group.student_count}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            ` : '<p class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º</p>'}
                        </div>

                        <!-- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ -->
                        <div class="col-md-6">
                            <h5>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫</h5>
                            ${gradesDistribution.length > 0 ? `
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>–û—Ü–µ–Ω–∫–∞</th>
                                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                                                <th>–ü—Ä–æ—Ü–µ–Ω—Ç</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${gradesDistribution.map(grade => `
                                                <tr>
                                                    <td>
                                                        <span class="badge ${this.getGradeBadgeClass(grade.grade)}">
                                                            ${grade.grade}
                                                        </span>
                                                    </td>
                                                    <td>${grade.count}</td>
                                                    <td>${grade.percentage ? grade.percentage.toFixed(1) + '%' : '0%'}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            ` : '<p class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ü–µ–Ω–∫–∞–º</p>'}
                        </div>
                    </div>

                    <div class="row mt-4">
                        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º -->
                        <div class="col-12">
                            <h5>üìö –£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º</h5>
                            ${subjectsStats.length > 0 ? `
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                                                <th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫</th>
                                                <th>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${subjectsStats.map(subject => `
                                                <tr>
                                                    <td>${subject.subject_name}</td>
                                                    <td>
                                                        <span class="badge ${this.getGradeBadgeClass(Math.round(subject.average_grade))}">
                                                            ${subject.average_grade ? subject.average_grade.toFixed(2) : '0.00'}
                                                        </span>
                                                    </td>
                                                    <td>${subject.grade_count}</td>
                                                    <td>${subject.teacher_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            ` : '<p class="text-muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º</p>'}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    async loadScheduleSection() {
        try {
            if (this.currentUser.role === 'student') {
                return await this.loadStudentSchedule();
            } else {
                return await this.loadTeacherSchedule();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }
    }

    // üéì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    async loadStudentSchedule() {
        try {
            const studentId = this.currentUser.student_id || this.currentUser.id;
            const response = await this.apiRequest(`/api/schedule/student/${studentId}`);
            
            if (response.success) {
                return this.renderStudentSchedule(response.data);
            } else {
                return this.getErrorContent(response.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }
    }

    // üé® –†–µ–Ω–¥–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    renderStudentSchedule(scheduleData) {
        if (!scheduleData || !scheduleData.schedule || scheduleData.schedule.length === 0) {
            return `
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h4 class="mb-0">üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h4>
                    </div>
                    <div class="card-body text-center py-5">
                        <i class="fas fa-calendar-alt fa-3x text-muted mb-3"></i>
                        <h5>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h5>
                        <p class="text-muted">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.</p>
                    </div>
                </div>
            `;
        }

        const { student, schedule } = scheduleData;
        const daysOfWeek = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];

        return `
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h4 class="mb-0">üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h4>
                </div>
                <div class="card-body">
                    <div class="alert alert-primary mb-4">
                        <h6>üë§ –°—Ç—É–¥–µ–Ω—Ç: <strong>${student.name}</strong></h6>
                        <p class="mb-0">üéì –ì—Ä—É–ø–ø–∞: <strong>${student.group_name}</strong></p>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</th>
                                    <th>–í—Ä–µ–º—è</th>
                                    <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                                    <th>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</th>
                                    <th>–ê—É–¥–∏—Ç–æ—Ä–∏—è</th>
                                    <th>–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${schedule.map(lesson => `
                                    <tr>
                                        <td><strong>${daysOfWeek[lesson.day_of_week - 1] || lesson.day_of_week}</strong></td>
                                        <td>${lesson.start_time} - ${lesson.end_time}</td>
                                        <td>${lesson.subject_name}</td>
                                        <td>${lesson.teacher_name}</td>
                                        <td><code>${lesson.classroom || '‚Äî'}</code></td>
                                        <td>
                                            <span class="badge ${this.getLessonTypeBadge(lesson.lesson_type)}">
                                                ${this.getLessonTypeText(lesson.lesson_type)}
                                            </span>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;
    }

    // üë®‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async loadTeacherSchedule() {
        try {
            const teacherId = this.currentUser.teacher_id || this.currentUser.id;
            const response = await this.apiRequest(`/api/schedule/teacher/${teacherId}`);
            
            if (response.success) {
                return this.renderTeacherSchedule(response.data);
            } else {
                return this.getErrorContent(response.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }
    }

    // üé® –†–µ–Ω–¥–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    renderTeacherSchedule(schedule) {
        if (!schedule || schedule.length === 0) {
            return `
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h4 class="mb-0">üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h4>
                    </div>
                    <div class="card-body text-center py-5">
                        <i class="fas fa-calendar-alt fa-3x text-muted mb-3"></i>
                        <h5>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h5>
                        <p class="text-muted">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.</p>
                    </div>
                </div>
            `;
        }

        const daysOfWeek = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];

        return `
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h4 class="mb-0">üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h4>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</th>
                                    <th>–í—Ä–µ–º—è</th>
                                    <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                                    <th>–ì—Ä—É–ø–ø–∞</th>
                                    <th>–ê—É–¥–∏—Ç–æ—Ä–∏—è</th>
                                    <th>–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${schedule.map(lesson => `
                                    <tr>
                                        <td><strong>${daysOfWeek[lesson.day_of_week - 1] || lesson.day_of_week}</strong></td>
                                        <td>${lesson.start_time} - ${lesson.end_time}</td>
                                        <td>${lesson.subject_name}</td>
                                        <td>${lesson.group_name}</td>
                                        <td><code>${lesson.classroom || '‚Äî'}</code></td>
                                        <td>
                                            <span class="badge ${this.getLessonTypeBadge(lesson.lesson_type)}">
                                                ${this.getLessonTypeText(lesson.lesson_type)}
                                            </span>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;
    }

    // üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    async loadAttendanceSection() {
        try {
            if (this.currentUser.role === 'student') {
                return await this.loadStudentAttendance();
            } else {
                return await this.loadTeacherAttendance();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏');
        }
    }

    // üéì –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    async loadStudentAttendance() {
        try {
            const studentId = this.currentUser.student_id || this.currentUser.id;
            const response = await this.apiRequest(`/api/attendance/student/${studentId}`);
            
            if (response.success) {
                return this.renderStudentAttendance(response.data);
            } else {
                return this.getErrorContent(response.error);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏');
        }
    }

    // üé® –†–µ–Ω–¥–µ—Ä –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    renderStudentAttendance(attendanceData) {
        if (!attendanceData || !attendanceData.attendance || attendanceData.attendance.length === 0) {
            return `
                <div class="card">
                    <div class="card-header bg-warning text-white">
                        <h4 class="mb-0">üìù –ú–æ—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</h4>
                    </div>
                    <div class="card-body text-center py-5">
                        <i class="fas fa-clipboard-check fa-3x text-muted mb-3"></i>
                        <h5>–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</h5>
                        <p class="text-muted">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–º–µ—Ç–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.</p>
                    </div>
                </div>
            `;
        }

        const { student, attendance } = attendanceData;
        const stats = this.calculateAttendanceStats(attendance);

        return `
            <div class="card">
                <div class="card-header bg-warning text-white">
                    <h4 class="mb-0">üìù –ú–æ—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</h4>
                </div>
                <div class="card-body">
                    <div class="alert alert-primary mb-4">
                        <h6>üë§ –°—Ç—É–¥–µ–Ω—Ç: <strong>${student.name}</strong></h6>
                        <p class="mb-0">üéì –ì—Ä—É–ø–ø–∞: <strong>${student.group_name}</strong></p>
                    </div>

                    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center py-3">
                                    <h6>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</h6>
                                    <h3>${stats.present}</h3>
                                    <small>${stats.presentPercentage}%</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-danger text-white">
                                <div class="card-body text-center py-3">
                                    <h6>–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</h6>
                                    <h3>${stats.absent}</h3>
                                    <small>${stats.absentPercentage}%</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center py-3">
                                    <h6>–û–ø–æ–∑–¥–∞–ª</h6>
                                    <h3>${stats.late}</h3>
                                    <small>${stats.latePercentage}%</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center py-3">
                                    <h6>–ë–æ–ª–µ–ª</h6>
                                    <h3>${stats.sick}</h3>
                                    <small>${stats.sickPercentage}%</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ -->
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>–î–∞—Ç–∞</th>
                                    <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                                    <th>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${attendance.map(record => `
                                    <tr>
                                        <td>${new Date(record.date).toLocaleDateString('ru-RU')}</td>
                                        <td>
                                            <strong>${record.subject_name}</strong>
                                            <br><small class="text-muted">${record.classroom || ''}</small>
                                        </td>
                                        <td>${record.teacher_name}</td>
                                        <td>
                                            <span class="badge ${this.getAttendanceBadgeClass(record.status)}">
                                                ${this.getAttendanceStatusText(record.status)}
                                            </span>
                                        </td>
                                        <td>${record.notes || '<span class="text-muted">‚Äî</span>'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;
    }

    // üë®‚Äçüè´ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async loadTeacherAttendance() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            const [groupsResponse, subjectsResponse] = await Promise.all([
                this.apiRequest('/api/groups'),
                this.apiRequest('/api/subjects')
            ]);

            if (!groupsResponse.success || !subjectsResponse.success) {
                return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            }

            return `
                <div class="card">
                    <div class="card-header bg-warning text-white">
                        <h4 class="mb-0">üìù –£—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏</h4>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <h6>üë®‚Äçüè´ –†–µ–∂–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</h6>
                            <p class="mb-0">–û—Ç–º–µ—á–∞–π—Ç–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º.</p>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-3">
                                <label class="form-label">–ì—Ä—É–ø–ø–∞</label>
                                <select class="form-select" id="attendanceGroupSelect">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É...</option>
                                    ${(groupsResponse.data || []).map(group => 
                                        `<option value="${group.id}">${group.name}</option>`
                                    ).join('')}
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">–ü—Ä–µ–¥–º–µ—Ç</label>
                                <select class="form-select" id="attendanceSubjectSelect">
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...</option>
                                    ${(subjectsResponse.data || []).map(subject => 
                                        `<option value="${subject.id}">${subject.name}</option>`
                                    ).join('')}
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">–î–∞—Ç–∞</label>
                                <input type="date" class="form-control" id="attendanceDate" value="${new Date().toISOString().split('T')[0]}">
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">&nbsp;</label>
                                <button class="btn btn-primary w-100" onclick="app.loadAttendanceForm()">
                                    <i class="fas fa-search"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫
                                </button>
                            </div>
                        </div>
                        
                        <div id="attendanceFormContainer">
                            <div class="alert alert-info">
                                <h6>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h6>
                                <p class="mb-0">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –ø—Ä–µ–¥–º–µ—Ç –∏ –¥–∞—Ç—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', error);
            return this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏');
        }
    }

    // üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    async loadAttendanceForm() {
        const groupId = document.getElementById('attendanceGroupSelect').value;
        const subjectId = document.getElementById('attendanceSubjectSelect').value;
        const date = document.getElementById('attendanceDate').value;
        
        if (!groupId || !subjectId || !date) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –ø—Ä–µ–¥–º–µ—Ç –∏ –¥–∞—Ç—É', 'error');
            return;
        }

        const container = document.getElementById('attendanceFormContainer');
        container.innerHTML = this.getSectionLoader();

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
            const studentsResponse = await this.apiRequest(`/api/groups/${groupId}/students`);
            
            if (!studentsResponse.success) {
                container.innerHTML = this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤');
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
            const attendanceResponse = await this.apiRequest(`/api/attendance/${date}/${groupId}/${subjectId}`);
            const existingAttendance = attendanceResponse.success ? attendanceResponse.data : [];

            // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
            container.innerHTML = this.renderAttendanceForm(
                studentsResponse.data, 
                existingAttendance,
                groupId,
                subjectId,
                date
            );

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            container.innerHTML = this.getErrorContent('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã');
        }
    }

    // üé® –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    renderAttendanceForm(students, existingAttendance, groupId, subjectId, date) {
        if (!students || students.length === 0) {
            return '<div class="alert alert-warning">–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</div>';
        }

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const attendanceMap = {};
        existingAttendance.forEach(record => {
            attendanceMap[record.student_id] = record;
        });

        return `
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">üìù –û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏</h5>
                </div>
                <div class="card-body">
                    <form id="attendanceForm">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>–°—Ç—É–¥–µ–Ω—Ç</th>
                                        <th>–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞</th>
                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                        <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${students.map(student => {
                                        const existingRecord = attendanceMap[student.id];
                                        return `
                                            <tr>
                                                <td>
                                                    <strong>${student.name}</strong>
                                                    <input type="hidden" name="student_id[]" value="${student.id}">
                                                </td>
                                                <td><code>${student.student_card}</code></td>
                                                <td>
                                                    <select class="form-select form-select-sm" name="status[]" required>
                                                        <option value="present" ${existingRecord?.status === 'present' ? 'selected' : ''}>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</option>
                                                        <option value="absent" ${existingRecord?.status === 'absent' ? 'selected' : ''}>–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</option>
                                                        <option value="late" ${existingRecord?.status === 'late' ? 'selected' : ''}>–û–ø–æ–∑–¥–∞–ª</option>
                                                        <option value="sick" ${existingRecord?.status === 'sick' ? 'selected' : ''}>–ë–æ–ª–µ–ª</option>
                                                    </select>
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm" name="notes[]" 
                                                           placeholder="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ" value="${existingRecord?.notes || ''}">
                                                </td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                        </div>
                        
                        <div class="mt-3">
                            <button type="button" class="btn btn-success" onclick="app.saveAttendance()">
                                <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
                            </button>
                            <button type="button" class="btn btn-secondary ms-2" onclick="app.loadAttendanceForm()">
                                <i class="fas fa-sync"></i> –û–±–Ω–æ–≤–∏—Ç—å
                            </button>
                        </div>
                        
                        <input type="hidden" id="attendanceGroupId" value="${groupId}">
                        <input type="hidden" id="attendanceSubjectId" value="${subjectId}">
                        <input type="hidden" id="attendanceDateValue" value="${date}">
                    </form>
                </div>
            </div>
        `;
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    async saveAttendance() {
        const groupId = document.getElementById('attendanceGroupId').value;
        const subjectId = document.getElementById('attendanceSubjectId').value;
        const date = document.getElementById('attendanceDateValue').value;
        
        const form = document.getElementById('attendanceForm');
        const studentIds = Array.from(form.querySelectorAll('input[name="student_id[]"]')).map(input => input.value);
        const statuses = Array.from(form.querySelectorAll('select[name="status[]"]')).map(select => select.value);
        const notes = Array.from(form.querySelectorAll('input[name="notes[]"]')).map(input => input.value);

        const attendance_records = studentIds.map((studentId, index) => ({
            student_id: parseInt(studentId),
            status: statuses[index],
            notes: notes[index]
        }));

        const formData = {
            date,
            subject_id: parseInt(subjectId),
            group_id: parseInt(groupId),
            attendance_records
        };

        try {
            const response = await this.apiRequest('/api/attendance', {
                method: 'POST',
                body: JSON.stringify(formData)
            });

            if (response.success) {
                this.showNotification(response.message, 'success');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
                this.loadAttendanceForm();
            } else {
                this.showNotification(response.error, 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏', 'error');
        }
    }

    // üé® –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    getGradeBadgeClass(grade) {
        if (grade >= 4.5) return 'bg-success';
        if (grade >= 3.5) return 'bg-primary';
        if (grade >= 2.5) return 'bg-warning';
        return 'bg-danger';
    }

    getGradeTypeText(type) {
        const types = {
            'exam': '–≠–∫–∑–∞–º–µ–Ω',
            'test': '–ó–∞—á—ë—Ç',
            'coursework': '–ö—É—Ä—Å–æ–≤–∞—è',
            'practice': '–ü—Ä–∞–∫—Ç–∏–∫–∞'
        };
        return types[type] || type;
    }

    // üé® –ö–ª–∞—Å—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π
    getLessonTypeBadge(type) {
        const badges = {
            'lecture': 'bg-primary',
            'practice': 'bg-success',
            'lab': 'bg-info',
            'seminar': 'bg-warning'
        };
        return badges[type] || 'bg-secondary';
    }

    getLessonTypeText(type) {
        const types = {
            'lecture': '–õ–µ–∫—Ü–∏—è',
            'practice': '–ü—Ä–∞–∫—Ç–∏–∫–∞',
            'lab': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è',
            'seminar': '–°–µ–º–∏–Ω–∞—Ä'
        };
        return types[type] || type;
    }

    // üé® –ö–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    getAttendanceBadgeClass(status) {
        const badges = {
            'present': 'bg-success',
            'absent': 'bg-danger',
            'late': 'bg-warning',
            'sick': 'bg-info'
        };
        return badges[status] || 'bg-secondary';
    }

    getAttendanceStatusText(status) {
        const statuses = {
            'present': '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª',
            'absent': '–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª',
            'late': '–û–ø–æ–∑–¥–∞–ª',
            'sick': '–ë–æ–ª–µ–ª'
        };
        return statuses[status] || status;
    }

    // üìä –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    calculateAttendanceStats(attendance) {
        const total = attendance.length;
        const present = attendance.filter(a => a.status === 'present').length;
        const absent = attendance.filter(a => a.status === 'absent').length;
        const late = attendance.filter(a => a.status === 'late').length;
        const sick = attendance.filter(a => a.status === 'sick').length;

        return {
            present,
            absent,
            late,
            sick,
            total,
            presentPercentage: total > 0 ? ((present / total) * 100).toFixed(1) : '0.0',
            absentPercentage: total > 0 ? ((absent / total) * 100).toFixed(1) : '0.0',
            latePercentage: total > 0 ? ((late / total) * 100).toFixed(1) : '0.0',
            sickPercentage: total > 0 ? ((sick / total) * 100).toFixed(1) : '0.0'
        };
    }

    // üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤–µ–¥–æ–º–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    exportGradebook() {
        this.showNotification('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'info');
    }

    async apiRequest(endpoint, options = {}) {
        const url = endpoint;
        const headers = {
            'Authorization': `Bearer ${this.authToken}`,
            'Content-Type': 'application/json',
            ...options.headers
        };

        const config = {
            method: options.method || 'GET',
            headers: headers,
            ...options
        };

        if (options.body) {
            config.body = options.body;
        }

        try {
            const response = await fetch(url, config);
            
            if (response.status === 401) {
                this.logout();
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            }

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error('API Request Error:', error);
            throw error;
        }
    }

    // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let container = document.getElementById('notifications');
        if (!container) {
            container = document.createElement('div');
            container.id = 'notifications';
            container.className = 'position-fixed top-0 end-0 p-3';
            container.style.zIndex = '9999';
            document.body.appendChild(container);
        }

        const alertClass = {
            success: 'alert-success',
            error: 'alert-danger',
            warning: 'alert-warning',
            info: 'alert-info'
        }[type] || 'alert-info';

        const icon = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        }[type] || '‚ÑπÔ∏è';

        const notification = document.createElement('div');
        notification.className = `alert ${alertClass} alert-dismissible fade show`;
        notification.innerHTML = `
            ${icon} ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        container.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }

    

    logout() {
        localStorage.removeItem('authToken');
        localStorage.removeItem('currentUser');
        
        this.authToken = null;
        this.currentUser = null;
        
        document.getElementById('loginPage').classList.remove('d-none');
        document.getElementById('mainApp').classList.add('d-none');
        
        this.showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
    }
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
function exportStudentToPDF(studentId) {
    const url = `/api/statistics/student/${studentId}/pdf`;
    window.open(url, '_blank');
}

function exportGroupToPDF(groupId) {
    const url = `/api/statistics/group/${groupId}/pdf`;
    window.open(url, '_blank');
}

// –û–±–Ω–æ–≤–∏–º HTML –æ—Ç—á–µ—Ç—ã, –¥–æ–±–∞–≤–∏–≤ –∫–Ω–æ–ø–∫–∏ PDF
function enhanceReportButtons() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º PDF —ç–∫—Å–ø–æ—Ä—Ç
    document.querySelectorAll('.report-actions').forEach(container => {
        const studentId = container.dataset.studentId;
        const groupId = container.dataset.groupId;
        
        if (studentId) {
            const pdfBtn = document.createElement('button');
            pdfBtn.className = 'btn btn-pdf';
            pdfBtn.innerHTML = 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF';
            pdfBtn.onclick = () => exportStudentToPDF(studentId);
            container.appendChild(pdfBtn);
        }
        
        if (groupId) {
            const pdfBtn = document.createElement('button');
            pdfBtn.className = 'btn btn-pdf';
            pdfBtn.innerHTML = 'üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF';
            pdfBtn.onclick = () => exportGroupToPDF(groupId);
            container.appendChild(pdfBtn);
        }
    });
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', enhanceReportButtons);

// üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;

document.addEventListener('DOMContentLoaded', function() {
    app = new GradebookApp();
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.app = app;
    window.logout = () => app.logout();
    window.toggleTheme = () => {
        const html = document.documentElement;
        const currentTheme = html.getAttribute('data-bs-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        html.setAttribute('data-bs-theme', newTheme);
        localStorage.setItem('theme', newTheme);
    };
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-bs-theme', savedTheme);
});

console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');

} // –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ typeof GradebookApp === 'undefined'