// recreate-attendance-table-final.js
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'gradebook.db');
const db = new sqlite3.Database(dbPath);

console.log('üîÑ –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã attendance...');

// –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
const dropTable = `DROP TABLE IF EXISTS attendance`;

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
const createTable = `
CREATE TABLE attendance (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    subject_id INTEGER NOT NULL,
    teacher_id INTEGER NOT NULL,
    date DATE NOT NULL,
    status TEXT NOT NULL CHECK(status IN ('present', 'absent', 'late', 'excused')),
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (subject_id) REFERENCES subjects(id),
    FOREIGN KEY (teacher_id) REFERENCES teachers(id)
);
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const insertTestData = `
INSERT INTO attendance (student_id, subject_id, teacher_id, date, status, notes)
VALUES 
    (1, 1, 1, '2024-10-15', 'present', ''),
    (2, 1, 1, '2024-10-15', 'present', ''),
    (3, 1, 1, '2024-10-15', 'absent', '–ë–æ–ª–µ–ª'),
    (4, 1, 1, '2024-10-15', 'late', '–û–ø–æ–∑–¥–∞–ª –Ω–∞ 10 –º–∏–Ω—É—Ç')
`;

db.serialize(() => {
    // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    db.run(dropTable, (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', err);
            db.close();
            return;
        }
        console.log('‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        db.run(createTable, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', err);
                db.close();
                return;
            }
            console.log('‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            db.run(insertTestData, (err) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err);
                } else {
                    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                db.all("PRAGMA table_info(attendance)", (err, columns) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', err);
                    } else {
                        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã:');
                        columns.forEach(col => {
                            console.log(`  ${col.name} (${col.type})`);
                        });
                    }
                    
                    db.close();
                    console.log('üéâ –¢–∞–±–ª–∏—Ü–∞ attendance –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!');
                });
            });
        });
    });
});