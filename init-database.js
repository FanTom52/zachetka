const mysql = require('mysql2/promise');
require('dotenv').config();

async function initializeDatabase() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const connection = await mysql.createConnection({
            host: process.env.DB_HOST || 'localhost',
            user: process.env.DB_USER || 'root',
            password: process.env.DB_PASSWORD || ''
        });

        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await connection.execute('CREATE DATABASE IF NOT EXISTS gradebook');
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö gradebook —Å–æ–∑–¥–∞–Ω–∞');

        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await connection.execute('USE gradebook');
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö gradebook');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ schema.sql
        const fs = require('fs');
        const schema = fs.readFileSync('./database/schema.sql', 'utf8');
        
        const statements = schema.split(';').filter(stmt => stmt.trim());
        
        for (const statement of statements) {
            if (statement.trim()) {
                await connection.execute(statement);
                console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω SQL statement');
            }
        }

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        await connection.end();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
const createSessionScheduleTable = `
CREATE TABLE IF NOT EXISTS session_schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    subject_id INTEGER NOT NULL,
    group_id INTEGER NOT NULL,
    teacher_id INTEGER NOT NULL,
    event_type TEXT NOT NULL CHECK(event_type IN ('exam', 'test', 'credit', 'consultation')),
    event_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    classroom TEXT,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (subject_id) REFERENCES subjects(id),
    FOREIGN KEY (group_id) REFERENCES groups(id),
    FOREIGN KEY (teacher_id) REFERENCES teachers(id)
);
`;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
const insertSessionScheduleData = `
INSERT OR IGNORE INTO session_schedule (subject_id, group_id, teacher_id, event_type, event_date, start_time, end_time, classroom, notes)
VALUES 
    (1, 1, 1, 'exam', '2024-12-20', '09:00', '10:30', '–ê—É–¥–∏—Ç–æ—Ä–∏—è 101', '–≠–∫–∑–∞–º–µ–Ω –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é'),
    (2, 1, 2, 'test', '2024-12-22', '11:00', '12:00', '–ê—É–¥–∏—Ç–æ—Ä–∏—è 102', '–ó–∞—á—ë—Ç –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö'),
    (3, 2, 1, 'credit', '2024-12-25', '14:00', '15:30', '–ê—É–¥–∏—Ç–æ—Ä–∏—è 201', '–î–∏—Ñ–∑–∞—á—ë—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ'),
    (1, 2, 1, 'consultation', '2024-12-18', '16:00', '17:00', '–ö–∞–±. 305', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º');
`;

initializeDatabase();