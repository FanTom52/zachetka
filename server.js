const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const database = require('./database');
require('dotenv').config();

if (!process.env.JWT_SECRET) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JWT_SECRET –≤ —Ñ–∞–π–ª–µ .env');
    console.error('üí° –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env —Å—Ç—Ä–æ–∫—É: JWT_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á');
    process.exit(1); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ 
            success: false, 
            error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
        });
    }

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ 
                success: false, 
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
            });
        }
        req.user = user;
        next();
    });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ headers
const authenticateTokenFromQuery = (req, res, next) => {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const tokenFromQuery = req.query.token;
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ headers
    const authHeader = req.headers['authorization'];
    const tokenFromHeader = authHeader && authHeader.split(' ')[1];

    const token = tokenFromQuery || tokenFromHeader;

    if (!token) {
        return res.status(401).json({ 
            success: false, 
            error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
        });
    }

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ 
                success: false, 
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
            });
        }
        req.user = user;
        next();
    });
};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
app.use((req, res, next) => {
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    next();
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if (!username || !password) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–∏–Ω–∞
        if (username.length < 3) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
        if (password.length < 6) {
            return res.status(400).json({
                success: false,
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const users = await database.query(
            `SELECT u.*, 
                    s.id as student_id, s.group_id,
                    t.id as teacher_id
             FROM users u
             LEFT JOIN students s ON u.student_id = s.id
             LEFT JOIN teachers t ON u.teacher_id = t.id
             WHERE u.username = ?`, 
            [username]
        );

        if (users.length === 0) {
            return res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        const user = users[0];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign(
            { 
                id: user.id, 
                username: user.username, 
                role: user.role,
                student_id: user.student_id,
                teacher_id: user.teacher_id
            },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä–æ–ª—è –∏ –±–µ–∑ name
        const userResponse = {
            id: user.id,
            username: user.username,
            role: user.role,
            student_id: user.student_id,
            teacher_id: user.teacher_id
        };

        res.json({
            success: true,
            token,
            user: userResponse
        });

    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        });
    }
});

// üìç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post('/api/auth/register', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
        if (req.user.role !== 'admin') {
            return res.status(403).json({
                success: false,
                error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            });
        }

        const { username, password, role, student_card, group_id } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if (!username || !password || !role) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–∏–Ω–∞
        if (username.length < 3) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
        if (password.length < 6) {
            return res.status(400).json({
                success: false,
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
        if (!['student', 'teacher', 'admin'].includes(role)) {
            return res.status(400).json({
                success: false,
                error: '–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "student", "teacher" –∏–ª–∏ "admin"'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        const existingUsers = await database.query(
            'SELECT id FROM users WHERE username = ?', 
            [username]
        );

        if (existingUsers.length > 0) {
            return res.status(400).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 10);

        let student_id = null;
        let teacher_id = null;

        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ students
        if (role === 'student') {
            if (!student_card) {
                return res.status(400).json({
                    success: false,
                    error: '–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏'
                });
            }

            const studentResult = await database.run(
                `INSERT INTO students (name, student_card, group_id) 
                 VALUES (?, ?, ?)`,
                [username, student_card, group_id || null]
            );
            student_id = studentResult.insertId;
        }

        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ teachers
        if (role === 'teacher') {
            const teacherResult = await database.run(
                `INSERT INTO teachers (name) 
                 VALUES (?)`,
                [username]
            );
            teacher_id = teacherResult.insertId;
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await database.run(
            `INSERT INTO users (username, password, role, student_id, teacher_id) 
             VALUES (?, ?, ?, ?, ?)`,
            [username, hashedPassword, role, student_id, teacher_id]
        );

        res.json({
            success: true,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!'
        });

    } catch (error) {
        console.error('Registration error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/auth/me', authenticateToken, async (req, res) => {
    try {
        const users = await database.query(
            `SELECT u.*, 
                    s.id as student_id, s.group_id,
                    t.id as teacher_id
             FROM users u
             LEFT JOIN students s ON u.student_id = s.id
             LEFT JOIN teachers t ON u.teacher_id = t.id
             WHERE u.id = ?`, 
            [req.user.id]
        );

        if (users.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        const user = users[0];
        const userResponse = {
            id: user.id,
            username: user.username,
            role: user.role,
            student_id: user.student_id,
            teacher_id: user.teacher_id
        };

        res.json({
            success: true,
            user: userResponse
        });

    } catch (error) {
        console.error('Get user error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/admin/users', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if (req.user.role !== 'admin') {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
            });
        }

        const users = await database.query(`
            SELECT u.*, 
                   s.student_card,
                   s.name as student_name,
                   g.name as group_name
            FROM users u
            LEFT JOIN students s ON u.student_id = s.id
            LEFT JOIN groups g ON s.group_id = g.id
            ORDER BY u.created_at DESC
        `);

        res.json({
            success: true,
            data: users
        });

    } catch (error) {
        console.error('Get users error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
app.get('/api/students', authenticateToken, async (req, res) => {
    try {
        const students = await database.query(`
            SELECT s.*, g.name as group_name 
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id
        `);
        
        res.json({
            success: true,
            data: { students }
        });
    } catch (error) {
        console.error('Get students error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
        });
    }
});

// üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.post('/api/students', authenticateToken, async (req, res) => {
    try {
        const { name, group_id, student_card, email, phone } = req.body;

        if (!name || !group_id || !student_card) {
            return res.status(400).json({
                success: false,
                error: '–§–ò–û, –≥—Ä—É–ø–ø–∞ –∏ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        const result = await database.run(
            `INSERT INTO students (name, group_id, student_card, email, phone) 
             VALUES (?, ?, ?, ?, ?)`,
            [name, group_id, student_card, email, phone]
        );

        res.json({
            success: true,
            message: '–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
            data: { id: result.insertId }
        });

    } catch (error) {
        console.error('Add student error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã –≥—Ä—É–ø–ø
app.get('/api/groups', authenticateToken, async (req, res) => {
    try {
        const groups = await database.query('SELECT * FROM groups');
        res.json({
            success: true,
            data: groups
        });
    } catch (error) {
        console.error('Get groups error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.get('/api/subjects', authenticateToken, async (req, res) => {
    try {
        const subjects = await database.query('SELECT * FROM subjects');
        res.json({
            success: true,
            data: subjects
        });
    } catch (error) {
        console.error('Get subjects error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤'
        });
    }
});

// üìç –û—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/grades/student/:studentId', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        const grades = await database.query(`
            SELECT g.*, s.name as subject_name, t.name as teacher_name
            FROM grades g
            LEFT JOIN subjects s ON g.subject_id = s.id
            LEFT JOIN teachers t ON g.teacher_id = t.id
            WHERE g.student_id = ?
            ORDER BY g.date DESC
        `, [studentId]);

        res.json({
            success: true,
            data: grades
        });
    } catch (error) {
        console.error('Get student grades error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫'
        });
    }
});

// üìç –í–µ–¥–æ–º–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
app.get('/api/grades/gradebook/:groupId/:subjectId', authenticateToken, async (req, res) => {
    try {
        const { groupId, subjectId } = req.params;
        
        const students = await database.query(`
            SELECT s.id as student_id, s.name as student_name, s.student_card,
                   g.grade, g.grade_type, g.date
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id AND g.subject_id = ?
            WHERE s.group_id = ?
            ORDER BY s.name
        `, [subjectId, groupId]);

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        const group = await database.query('SELECT name FROM groups WHERE id = ?', [groupId]);
        const subject = await database.query('SELECT name FROM subjects WHERE id = ?', [subjectId]);

        res.json({
            success: true,
            data: {
                group: group[0]?.name || '–ì—Ä—É–ø–ø–∞',
                subject: subject[0]?.name || '–ü—Ä–µ–¥–º–µ—Ç',
                students: students
            }
        });
    } catch (error) {
        console.error('Get gradebook error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–¥–æ–º–æ—Å—Ç–∏'
        });
    }
});

// üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
app.post('/api/grades', authenticateToken, async (req, res) => {
    try {
        const { student_id, subject_id, grade, grade_type, date } = req.body;

        if (!student_id || !subject_id || !grade || !grade_type || !date) {
            return res.status(400).json({
                success: false,
                error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É
        const existingGrade = await database.query(
            'SELECT id FROM grades WHERE student_id = ? AND subject_id = ? AND grade_type = ?',
            [student_id, subject_id, grade_type]
        );

        if (existingGrade.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É
            await database.run(
                'UPDATE grades SET grade = ?, date = ?, teacher_id = ? WHERE id = ?',
                [grade, date, req.user.teacher_id || req.user.id, existingGrade[0].id]
            );
            
            res.json({
                success: true,
                message: '–û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
            });
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            await database.run(
                `INSERT INTO grades (student_id, subject_id, grade, grade_type, date, teacher_id) 
                 VALUES (?, ?, ?, ?, ?, ?)`,
                [student_id, subject_id, grade, grade_type, date, req.user.teacher_id || req.user.id]
            );
            
            res.json({
                success: true,
                message: '–û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞'
            });
        }

    } catch (error) {
        console.error('Save grade error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
        });
    }
});

// üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/statistics/overview', authenticateToken, async (req, res) => {
    try {
        const studentsCount = await database.query('SELECT COUNT(*) as count FROM students');
        const teachersCount = await database.query('SELECT COUNT(*) as count FROM teachers');
        const subjectsCount = await database.query('SELECT COUNT(*) as count FROM subjects');
        const gradesCount = await database.query('SELECT COUNT(*) as count FROM grades');

        res.json({
            success: true,
            data: {
                students: studentsCount[0].count,
                teachers: teachersCount[0].count,
                subjects: subjectsCount[0].count,
                grades: gradesCount[0].count
            }
        });
    } catch (error) {
        console.error('Statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø
app.get('/api/statistics/groups', authenticateToken, async (req, res) => {
    try {
        const groupsStats = await database.query(`
            SELECT g.id, g.name as group_name, g.specialization,
                   COUNT(s.id) as student_count,
                   AVG(gr.grade) as average_grade,
                   CASE 
                     WHEN COUNT(gr.id) > 0 THEN 
                       (COUNT(CASE WHEN gr.grade >= 3 THEN 1 END) * 100.0 / COUNT(gr.id))
                     ELSE 0 
                   END as success_rate
            FROM groups g
            LEFT JOIN students s ON g.id = s.group_id
            LEFT JOIN grades gr ON s.id = gr.student_id
            GROUP BY g.id, g.name, g.specialization
            ORDER BY average_grade DESC
        `);

        res.json({
            success: true,
            data: groupsStats
        });
    } catch (error) {
        console.error('Groups statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.get('/api/statistics/subjects', authenticateToken, async (req, res) => {
    try {
        const subjectsStats = await database.query(`
            SELECT s.id, s.name as subject_name, s.hours, s.semester,
                   t.name as teacher_name,
                   AVG(g.grade) as average_grade,
                   COUNT(g.id) as grade_count
            FROM subjects s
            LEFT JOIN teachers t ON s.teacher_id = t.id
            LEFT JOIN grades g ON s.id = g.subject_id
            GROUP BY s.id, s.name, s.hours, s.semester, t.name
            ORDER BY average_grade DESC
        `);

        res.json({
            success: true,
            data: subjectsStats
        });
    } catch (error) {
        console.error('Subjects statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤'
        });
    }
});

// üìç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
app.get('/api/statistics/grades-distribution', authenticateToken, async (req, res) => {
    try {
        const gradesDistribution = await database.query(`
            SELECT grade, COUNT(*) as count,
                   (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM grades)) as percentage
            FROM grades
            GROUP BY grade
            ORDER BY grade DESC
        `);

        res.json({
            success: true,
            data: gradesDistribution
        });
    } catch (error) {
        console.error('Grades distribution error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫'
        });
    }
});

// üìç –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/statistics/monthly', authenticateToken, async (req, res) => {
    try {
        const monthlyStats = await database.query(`
            SELECT strftime('%Y-%m', date) as month,
                   AVG(grade) as average_grade,
                   COUNT(*) as grade_count
            FROM grades
            WHERE date IS NOT NULL
            GROUP BY strftime('%Y-%m', date)
            ORDER BY month DESC
            LIMIT 12
        `);

        res.json({
            success: true,
            data: monthlyStats
        });
    } catch (error) {
        console.error('Monthly statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// üìÑ PDF –æ—Ç—á–µ—Ç –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
app.get('/api/student/report/pdf', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
        if (req.user.role !== 'student') {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
            });
        }

        const studentId = req.user.student_id;
        console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', studentId);

        const PDFDocument = require('pdfkit');
        const doc = new PDFDocument();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="student-report-${studentId}.pdf"`);
        
        // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è PDF
        const buffers = [];
        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => {
            const pdfData = Buffer.concat(buffers);
            res.send(pdfData);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ PDF
        doc.fontSize(20).text('–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞', 100, 100);
        doc.fontSize(12);
        doc.text(`ID —Å—Ç—É–¥–µ–Ω—Ç–∞: ${studentId}`, 100, 150);
        doc.text(`–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU')}`, 100, 170);
        doc.text('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∑–∞—á–µ—Ç–∫–∞', 100, 190);
        doc.text('–¢–µ—Ö–Ω–∏–∫—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π', 100, 210);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        doc.moveTo(100, 240).lineTo(500, 240).stroke();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        doc.text('–≠—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç.', 100, 260);
        doc.text('–í –æ—Ç—á–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏', 100, 280);
        doc.text('–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.', 100, 300);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        doc.text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 100, 330);
        doc.text('‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 4.2', 120, 350);
        doc.text('‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: 15', 120, 370);
        doc.text('‚Ä¢ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: 92%', 120, 390);
        
        doc.end();

        console.log('‚úÖ PDF —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'
        });
    }
});

// üìÑ PDF –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
app.get('/api/statistics/group/:groupId/pdf', authenticateToken, async (req, res) => {
    try {
        const groupId = req.params.groupId;
        console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –≥—Ä—É–ø–ø—ã:', groupId);

        const PDFDocument = require('pdfkit');
        const doc = new PDFDocument();
        
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="group-report-${groupId}.pdf"`);
        
        // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è PDF
        const buffers = [];
        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => {
            const pdfData = Buffer.concat(buffers);
            res.send(pdfData);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ PDF
        doc.fontSize(20).text('–û—Ç—á–µ—Ç –ø–æ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø–µ', 100, 100);
        doc.fontSize(12);
        doc.text(`–ì—Ä—É–ø–ø–∞: –¢-${groupId}`, 100, 150);
        doc.text(`–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU')}`, 100, 170);
        doc.text('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∑–∞—á–µ—Ç–∫–∞', 100, 190);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        doc.moveTo(100, 220).lineTo(500, 220).stroke();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        doc.text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã:', 100, 240);
        doc.text('‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 25', 120, 260);
        doc.text('‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≥—Ä—É–ø–ø—ã: 4.1', 120, 280);
        doc.text('‚Ä¢ –û–±—â–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å: 89%', 120, 300);
        doc.text('‚Ä¢ –õ—É—á—à–∏–π —Å—Ç—É–¥–µ–Ω—Ç: –ò–≤–∞–Ω–æ–≤ –ò.–ò. (4.7)', 120, 320);
        
        doc.text('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:', 100, 350);
        doc.text('‚Ä¢ –û—Ç–ª–∏—á–Ω–æ (5): 45%', 120, 370);
        doc.text('‚Ä¢ –•–æ—Ä–æ—à–æ (4): 35%', 120, 390);
        doc.text('‚Ä¢ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (3): 15%', 120, 410);
        doc.text('‚Ä¢ –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (2): 5%', 120, 430);
        
        doc.end();

        console.log('‚úÖ PDF –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –≥—Ä—É–ø–ø—ã:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –≥—Ä—É–ø–ø—ã'
        });
    }
});

// üìÑ –¢–ï–°–¢–û–í–´–ô PDF –º–∞—Ä—à—Ä—É—Ç –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
app.get('/api/test/pdf', (req, res) => {
    try {
        console.log('üìÑ –¢–µ—Å—Ç–æ–≤—ã–π PDF –∑–∞–ø—Ä–æ—Å');

        const PDFDocument = require('pdfkit');
        const doc = new PDFDocument();
        
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename="test.pdf"');
        
        doc.pipe(res);
        doc.fontSize(20).text('–¢–ï–°–¢–û–í–´–ô PDF', 100, 100);
        doc.fontSize(12).text('–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ - PDF —Ä–∞–±–æ—Ç–∞–µ—Ç!', 100, 150);
        doc.text('–î–∞—Ç–∞: ' + new Date().toLocaleDateString(), 100, 170);
        doc.end();

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF'
        });
    }
});

// üìÑ HTML –æ—Ç—á–µ—Ç –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–∫–µ–Ω–∞ –∏–∑ query)
app.get('/api/student/report/html', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ headers
        const tokenFromQuery = req.query.token;
        const authHeader = req.headers['authorization'];
        const tokenFromHeader = authHeader && authHeader.split(' ')[1];
        const token = tokenFromQuery || tokenFromHeader;

        if (!token) {
            return res.status(401).json({
                success: false,
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        jwt.verify(token, process.env.JWT_SECRET, async (err, user) => {
            if (err) {
                return res.status(403).json({
                    success: false,
                    error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
            if (user.role !== 'student') {
                return res.status(403).json({
                    success: false,
                    error: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
                });
            }

            const studentId = user.student_id;
            console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', studentId);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            const studentData = await database.query(`
                SELECT s.*, g.name as group_name 
                FROM students s 
                LEFT JOIN groups g ON s.group_id = g.id 
                WHERE s.id = ?
            `, [studentId]);

            if (studentData.length === 0) {
                return res.status(404).json({
                    success: false,
                    error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
            const grades = await database.query(`
                SELECT g.*, s.name as subject_name, t.name as teacher_name
                FROM grades g
                LEFT JOIN subjects s ON g.subject_id = s.id
                LEFT JOIN teachers t ON g.teacher_id = t.id
                WHERE g.student_id = ?
                ORDER BY g.date DESC
            `, [studentId]);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
            const attendance = await database.query(`
                SELECT a.*, sub.name as subject_name
                FROM attendance a
                LEFT JOIN subjects sub ON a.subject_id = sub.id
                WHERE a.student_id = ?
                ORDER BY a.date DESC
                LIMIT 50
            `, [studentId]);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            const htmlReport = generateStudentDetailedHTMLReport(studentData[0], grades, attendance);
            
            res.setHeader('Content-Type', 'text/html');
            res.send(htmlReport);
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'
        });
    }
});

// üìÑ HTML –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–∫–µ–Ω–∞ –∏–∑ query)
app.get('/api/statistics/group/:groupId/html', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ headers
        const tokenFromQuery = req.query.token;
        const authHeader = req.headers['authorization'];
        const tokenFromHeader = authHeader && authHeader.split(' ')[1];
        const token = tokenFromQuery || tokenFromHeader;

        if (!token) {
            return res.status(401).json({
                success: false,
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        jwt.verify(token, process.env.JWT_SECRET, async (err, user) => {
            if (err) {
                return res.status(403).json({
                    success: false,
                    error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                });
            }

            const groupId = req.params.groupId;
            console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã:', groupId);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            const groupData = await database.query('SELECT * FROM groups WHERE id = ?', [groupId]);
            
            if (groupData.length === 0) {
                return res.status(404).json({
                    success: false,
                    error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
            const students = await database.query(`
                SELECT s.*, 
                       COUNT(g.id) as grades_count,
                       AVG(g.grade) as average_grade
                FROM students s
                LEFT JOIN grades g ON s.id = g.student_id
                WHERE s.group_id = ?
                GROUP BY s.id, s.name, s.student_card
                ORDER BY s.name
            `, [groupId]);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            const htmlReport = generateGroupHTMLReport(groupData[0], students);
            
            res.setHeader('Content-Type', 'text/html');
            res.send(htmlReport);
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
function generateStudentDetailedHTMLReport(student, grades, attendance) {
    const totalGrades = grades.length;
    const averageGrade = totalGrades > 0 
        ? (grades.reduce((sum, grade) => sum + grade.grade, 0) / totalGrades).toFixed(2)
        : 0;

    const attendanceStats = attendance.reduce((stats, record) => {
        if (record.status === 'present') stats.present++;
        else if (record.status === 'absent') stats.absent++;
        return stats;
    }, { present: 0, absent: 0 });

    const attendancePercentage = attendance.length > 0 
        ? ((attendanceStats.present / attendance.length) * 100).toFixed(1)
        : 0;

    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç - ${student.name}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; color: #333; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { border-bottom: 3px solid #007bff; padding-bottom: 15px; margin-bottom: 20px; text-align: center; }
        .section { margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1); border-left: 4px solid #007bff; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; background: white; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background-color: #007bff; color: white; }
        .badge { padding: 6px 12px; border-radius: 20px; color: white; font-size: 12px; font-weight: bold; }
        .badge-success { background: #28a745; }
        .badge-warning { background: #ffc107; color: #000; }
        .badge-danger { background: #dc3545; }
        .badge-info { background: #17a2b8; }
        .footer { margin-top: 30px; padding-top: 15px; border-top: 1px solid #ddd; color: #666; text-align: center; font-size: 12px; }
        .print-btn { background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin: 10px 0; }
        .print-btn:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéì –ú–æ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</h1>
            <h2>${student.name}</h2>
            <p>–ì—Ä—É–ø–ø–∞: ${student.group_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} | –ó–∞—á–µ—Ç–∫–∞: ${student.student_card || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            <button class="print-btn" onclick="window.print()">üñ®Ô∏è –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞</button>
        </div>

        <div class="section">
            <h3>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div class="stats-grid">
                <div class="stat-card">
                    <h4>–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</h4>
                    <p style="font-size: 32px; margin: 10px 0; color: #007bff;">${totalGrades}</p>
                </div>
                <div class="stat-card">
                    <h4>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</h4>
                    <p style="font-size: 32px; margin: 10px 0; color: #28a745;">${averageGrade}</p>
                </div>
                <div class="stat-card">
                    <h4>–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</h4>
                    <p style="font-size: 32px; margin: 10px 0; color: #17a2b8;">${attendancePercentage}%</p>
                </div>
                <div class="stat-card">
                    <h4>–ü—Ä–æ–ø—É—Å–∫–æ–≤</h4>
                    <p style="font-size: 32px; margin: 10px 0; color: #dc3545;">${attendanceStats.absent}</p>
                </div>
            </div>
        </div>

        <div class="section">
            <h3>üìù –ú–æ–∏ –æ—Ü–µ–Ω–∫–∏</h3>
            ${grades.length > 0 ? `
                <table>
                    <thead>
                        <tr>
                            <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                            <th>–û—Ü–µ–Ω–∫–∞</th>
                            <th>–¢–∏–ø</th>
                            <th>–î–∞—Ç–∞</th>
                            <th>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${grades.map(grade => `
                            <tr>
                                <td><strong>${grade.subject_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</strong></td>
                                <td>
                                    <span class="badge ${grade.grade >= 4 ? 'badge-success' : grade.grade >= 3 ? 'badge-warning' : 'badge-danger'}">
                                        ${grade.grade}
                                    </span>
                                </td>
                                <td>${grade.grade_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                                <td>${new Date(grade.date).toLocaleDateString('ru-RU')}</td>
                                <td>${grade.teacher_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            ` : '<p style="text-align: center; padding: 20px; color: #666;">–û—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>'}
        </div>

        <div class="section">
            <h3>‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</h3>
            ${attendance.length > 0 ? `
                <table>
                    <thead>
                        <tr>
                            <th>–î–∞—Ç–∞</th>
                            <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${attendance.map(record => `
                            <tr>
                                <td>${new Date(record.date).toLocaleDateString('ru-RU')}</td>
                                <td><strong>${record.subject_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</strong></td>
                                <td>
                                    <span class="badge ${record.status === 'present' ? 'badge-success' : 'badge-danger'}">
                                        ${record.status === 'present' ? '‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'}
                                    </span>
                                </td>
                                <td>${record.notes || '-'}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            ` : '<p style="text-align: center; padding: 20px; color: #666;">–ó–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–µ—Ç</p>'}
        </div>

        <div class="footer">
            <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}</p>
            <p>–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∑–∞—á–µ—Ç–∫–∏</p>
        </div>
    </div>

    <script>
        window.onload = function() {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—á–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            // window.print();
        }
    </script>
</body>
</html>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
function generateGroupHTMLReport(group, students) {
    const totalStudents = students.length;
    const groupAverage = students.length > 0 
        ? (students.reduce((sum, student) => sum + (student.average_grade || 0), 0) / students.length).toFixed(2)
        : 0;

    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ - ${group.name}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
        .header { border-bottom: 2px solid #007bff; padding-bottom: 10px; margin-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #007bff; color: white; }
        .footer { margin-top: 30px; padding-top: 10px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ</h1>
        <h2>–ì—Ä—É–ø–ø–∞: ${group.name}</h2>
        <p>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${group.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
    </div>

    <div class="section">
        <h3>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã</h3>
        <div class="stats-grid">
            <div class="stat-card">
                <h4>–°—Ç—É–¥–µ–Ω—Ç–æ–≤</h4>
                <p style="font-size: 24px; margin: 0; color: #007bff;">${totalStudents}</p>
            </div>
            <div class="stat-card">
                <h4>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</h4>
                <p style="font-size: 24px; margin: 0; color: #17a2b8;">${groupAverage}</p>
            </div>
        </div>
    </div>

    <div class="section">
        <h3>üéì –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h3>
        ${students.length > 0 ? `
            <table>
                <thead>
                    <tr>
                        <th>–°—Ç—É–¥–µ–Ω—Ç</th>
                        <th>–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏</th>
                        <th>–ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫</th>
                        <th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                    </tr>
                </thead>
                <tbody>
                    ${students.map(student => `
                        <tr>
                            <td>${student.name}</td>
                            <td>${student.student_card || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                            <td>${student.grades_count || 0}</td>
                            <td>${Math.round(student.average_grade * 100) / 100 || '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        ` : '<p>–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</p>'}
    </div>

    <div class="footer">
        <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}</p>
        <p>–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∑–∞—á–µ—Ç–∫–∏</p>
    </div>
</body>
</html>
    `;
}

// üìä –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í

// üìÑ HTML –æ—Ç—á–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ —Å–µ–±–µ
app.get('/api/student/report/html', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
        if (req.user.role !== 'student') {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
            });
        }

        const studentId = req.user.student_id;
        console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', studentId);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const studentData = await database.query(`
            SELECT s.*, g.name as group_name 
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id 
            WHERE s.id = ?
        `, [studentId]);

        if (studentData.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const grades = await database.query(`
            SELECT g.*, s.name as subject_name, t.name as teacher_name
            FROM grades g
            LEFT JOIN subjects s ON g.subject_id = s.id
            LEFT JOIN teachers t ON g.teacher_id = t.id
            WHERE g.student_id = ?
            ORDER BY g.date DESC
        `, [studentId]);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        const attendance = await database.query(`
            SELECT a.*, sub.name as subject_name
            FROM attendance a
            LEFT JOIN subjects sub ON a.subject_id = sub.id
            WHERE a.student_id = ?
            ORDER BY a.date DESC
            LIMIT 50
        `, [studentId]);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
        const htmlReport = generateStudentDetailedHTMLReport(studentData[0], grades, attendance);
        
        res.setHeader('Content-Type', 'text/html');
        res.send(htmlReport);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'
        });
    }
});

// üìÑ PDF –æ—Ç—á–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ —Å–µ–±–µ
app.get('/api/student/report/pdf', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
        if (req.user.role !== 'student') {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
            });
        }

        const studentId = req.user.student_id;
        console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', studentId);

        const PDFDocument = require('pdfkit');
        const doc = new PDFDocument();
        
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="my-report.pdf"`);
        
        doc.pipe(res);
        doc.fontSize(20).text('–ú–æ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç', 100, 100);
        doc.fontSize(12).text(`–°—Ç—É–¥–µ–Ω—Ç: ID ${studentId}`, 100, 150);
        doc.text('–≠—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç!', 100, 170);
        doc.text('–î–∞—Ç–∞: ' + new Date().toLocaleDateString(), 100, 190);
        doc.text('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å.', 100, 210);
        doc.end();

        console.log('‚úÖ PDF —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({ 
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'
        });
    }
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/student/statistics', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
        if (req.user.role !== 'student') {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
            });
        }

        const studentId = req.user.student_id;

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const grades = await database.query(`
            SELECT g.*, s.name as subject_name
            FROM grades g
            LEFT JOIN subjects s ON g.subject_id = s.id
            WHERE g.student_id = ?
        `, [studentId]);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        const attendance = await database.query(`
            SELECT a.*, sub.name as subject_name
            FROM attendance a
            LEFT JOIN subjects sub ON a.subject_id = sub.id
            WHERE a.student_id = ?
        `, [studentId]);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalGrades = grades.length;
        const averageGrade = totalGrades > 0 
            ? (grades.reduce((sum, grade) => sum + grade.grade, 0) / totalGrades).toFixed(2)
            : 0;

        const attendanceStats = attendance.reduce((stats, record) => {
            if (record.status === 'present') stats.present++;
            else if (record.status === 'absent') stats.absent++;
            return stats;
        }, { present: 0, absent: 0 });

        const attendancePercentage = attendance.length > 0 
            ? ((attendanceStats.present / attendance.length) * 100).toFixed(1)
            : 0;

        res.json({
            success: true,
            data: {
                totalGrades,
                averageGrade,
                attendance: attendanceStats,
                attendancePercentage,
                recentGrades: grades.slice(0, 10) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ü–µ–Ω–æ–∫
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// üìç –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', require('./routes/auth'));
app.use('/api/students', require('./routes/students'));
app.use('/api/grades', require('./routes/grades'));
app.use('/api/groups', require('./routes/groups'));
app.use('/api/subjects', require('./routes/subjects'));
app.use('/api/statistics', require('./routes/statistics'));
app.use('/api/teacher', require('./routes/teacher'));

// üìç –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/test', (req, res) => {
    res.json({
        success: true,
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString()
    });
});

// üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});

// üìç –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}`);
    console.log(`üìÑ –¢–µ—Å—Ç PDF: http://localhost:${PORT}/api/test/pdf`);
});