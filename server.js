const express = require('express');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const database = require('./database');
require('dotenv').config();

if (!process.env.JWT_SECRET) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JWT_SECRET –≤ —Ñ–∞–π–ª–µ .env');
    console.error('üí° –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env —Å—Ç—Ä–æ–∫—É: JWT_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á');
    process.exit(1); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ 
            success: false, 
            error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
        });
    }

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ 
                success: false, 
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
            });
        }
        req.user = user;
        next();
    });
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ headers
const authenticateTokenFromQuery = (req, res, next) => {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const tokenFromQuery = req.query.token;
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ headers
    const authHeader = req.headers['authorization'];
    const tokenFromHeader = authHeader && authHeader.split(' ')[1];

    const token = tokenFromQuery || tokenFromHeader;

    if (!token) {
        return res.status(401).json({ 
            success: false, 
            error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
        });
    }

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ 
                success: false, 
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
            });
        }
        req.user = user;
        next();
    });
};

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        // ‚≠ê‚≠ê‚≠ê –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø) ‚≠ê‚≠ê‚≠ê
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if (!username || !password) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–∏–Ω–∞
        if (username.length < 3) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
        if (password.length < 6) {
            return res.status(400).json({
                success: false,
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }
        // ‚≠ê‚≠ê‚≠ê –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ‚≠ê‚≠ê‚≠ê

        // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const users = await database.query(
            `SELECT u.*, 
                    s.id as student_id, s.group_id,
                    t.id as teacher_id
             FROM users u
             LEFT JOIN students s ON u.student_id = s.id
             LEFT JOIN teachers t ON u.teacher_id = t.id
             WHERE u.username = ?`, 
            [username]
        );

        if (users.length === 0) {
            return res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        const user = users[0];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign(
            { 
                id: user.id, 
                username: user.username, 
                role: user.role,
                student_id: user.student_id,
                teacher_id: user.teacher_id
            },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä–æ–ª—è –∏ –±–µ–∑ name
        const userResponse = {
            id: user.id,
            username: user.username,
            role: user.role,
            student_id: user.student_id,
            teacher_id: user.teacher_id
            // —É–±—Ä–∞–ª–∏ name
        };

        res.json({
            success: true,
            token,
            user: userResponse
        });

    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        });
    }
});

// üìç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.post('/api/auth/register', authenticateToken, async (req, res) => {
    try {
        // ‚≠ê‚≠ê‚≠ê –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ê ‚≠ê‚≠ê‚≠ê
        if (req.user.role !== 'admin') {
            return res.status(403).json({
                success: false,
                error: '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            });
        }

        const { username, password, role, student_card, group_id } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if (!username || !password || !role) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ª–æ–≥–∏–Ω–∞
        if (username.length < 3) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
        if (password.length < 6) {
            return res.status(400).json({
                success: false,
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
        if (!['student', 'teacher', 'admin'].includes(role)) {
            return res.status(400).json({
                success: false,
                error: '–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "student", "teacher" –∏–ª–∏ "admin"'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        const existingUsers = await database.query(
            'SELECT id FROM users WHERE username = ?', 
            [username]
        );

        if (existingUsers.length > 0) {
            return res.status(400).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 10);

        let student_id = null;
        let teacher_id = null;

        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ students
        if (role === 'student') {
            if (!student_card) {
                return res.status(400).json({
                    success: false,
                    error: '–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏'
                });
            }

            const studentResult = await database.run(
                `INSERT INTO students (name, student_card, group_id) 
                 VALUES (?, ?, ?)`,
                [username, student_card, group_id || null] // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ –∏–º—è
            );
            student_id = studentResult.insertId;
        }

        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ teachers
        if (role === 'teacher') {
            const teacherResult = await database.run(
                `INSERT INTO teachers (name) 
                 VALUES (?)`,
                [username] // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ –∏–º—è
            );
            teacher_id = teacherResult.insertId;
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ë–ï–ó –∫–æ–ª–æ–Ω–∫–∏ name)
        await database.run(
            `INSERT INTO users (username, password, role, student_id, teacher_id) 
             VALUES (?, ?, ?, ?, ?)`,
            [username, hashedPassword, role, student_id, teacher_id]
        );

        res.json({
            success: true,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!'
        });

    } catch (error) {
        console.error('Registration error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/auth/me', authenticateToken, async (req, res) => {
    try {
        const users = await database.query(
            `SELECT u.*, 
                    s.id as student_id, s.group_id,
                    t.id as teacher_id
             FROM users u
             LEFT JOIN students s ON u.student_id = s.id
             LEFT JOIN teachers t ON u.teacher_id = t.id
             WHERE u.id = ?`, 
            [req.user.id]
        );

        if (users.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        const user = users[0];
        const userResponse = {
            id: user.id,
            username: user.username,
            role: user.role,
            student_id: user.student_id,
            teacher_id: user.teacher_id
            // —É–±—Ä–∞–ª–∏ name
        };

        res.json({
            success: true,
            user: userResponse
        });

    } catch (error) {
        console.error('Get user error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.get('/api/admin/users', authenticateToken, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if (req.user.role !== 'admin') {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
            });
        }

        const users = await database.query(`
            SELECT u.*, 
                   s.student_card,
                   s.name as student_name,
                   g.name as group_name
            FROM users u
            LEFT JOIN students s ON u.student_id = s.id
            LEFT JOIN groups g ON s.group_id = g.id
            ORDER BY u.created_at DESC
        `);

        res.json({
            success: true,
            data: users
        });

    } catch (error) {
        console.error('Get users error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
app.get('/api/students', authenticateToken, async (req, res) => {
    try {
        const students = await database.query(`
            SELECT s.*, g.name as group_name 
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id
        `);
        
        res.json({
            success: true,
            data: { students }
        });
    } catch (error) {
        console.error('Get students error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
        });
    }
});

// üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.post('/api/students', authenticateToken, async (req, res) => {
    try {
        const { name, group_id, student_card, email, phone } = req.body;

        if (!name || !group_id || !student_card) {
            return res.status(400).json({
                success: false,
                error: '–§–ò–û, –≥—Ä—É–ø–ø–∞ –∏ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        const result = await database.run(
            `INSERT INTO students (name, group_id, student_card, email, phone) 
             VALUES (?, ?, ?, ?, ?)`,
            [name, group_id, student_card, email, phone]
        );

        res.json({
            success: true,
            message: '–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
            data: { id: result.insertId }
        });

    } catch (error) {
        console.error('Add student error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã –≥—Ä—É–ø–ø
app.get('/api/groups', authenticateToken, async (req, res) => {
    try {
        const groups = await database.query('SELECT * FROM groups');
        res.json({
            success: true,
            data: groups
        });
    } catch (error) {
        console.error('Get groups error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.get('/api/subjects', authenticateToken, async (req, res) => {
    try {
        const subjects = await database.query('SELECT * FROM subjects');
        res.json({
            success: true,
            data: subjects
        });
    } catch (error) {
        console.error('Get subjects error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤'
        });
    }
});

// üìç –û—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/grades/student/:studentId', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        const grades = await database.query(`
            SELECT g.*, s.name as subject_name, t.name as teacher_name
            FROM grades g
            LEFT JOIN subjects s ON g.subject_id = s.id
            LEFT JOIN teachers t ON g.teacher_id = t.id
            WHERE g.student_id = ?
            ORDER BY g.date DESC
        `, [studentId]);

        res.json({
            success: true,
            data: grades
        });
    } catch (error) {
        console.error('Get student grades error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫'
        });
    }
});

// üìç –í–µ–¥–æ–º–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
app.get('/api/grades/gradebook/:groupId/:subjectId', authenticateToken, async (req, res) => {
    try {
        const { groupId, subjectId } = req.params;
        
        const students = await database.query(`
            SELECT s.id as student_id, s.name as student_name, s.student_card,
                   g.grade, g.grade_type, g.date
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id AND g.subject_id = ?
            WHERE s.group_id = ?
            ORDER BY s.name
        `, [subjectId, groupId]);

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        const group = await database.query('SELECT name FROM groups WHERE id = ?', [groupId]);
        const subject = await database.query('SELECT name FROM subjects WHERE id = ?', [subjectId]);

        res.json({
            success: true,
            data: {
                group: group[0]?.name || '–ì—Ä—É–ø–ø–∞',
                subject: subject[0]?.name || '–ü—Ä–µ–¥–º–µ—Ç',
                students: students
            }
        });
    } catch (error) {
        console.error('Get gradebook error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–¥–æ–º–æ—Å—Ç–∏'
        });
    }
});

// üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
app.post('/api/grades', authenticateToken, async (req, res) => {
    try {
        const { student_id, subject_id, grade, grade_type, date } = req.body;

        if (!student_id || !subject_id || !grade || !grade_type || !date) {
            return res.status(400).json({
                success: false,
                error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É
        const existingGrade = await database.query(
            'SELECT id FROM grades WHERE student_id = ? AND subject_id = ? AND grade_type = ?',
            [student_id, subject_id, grade_type]
        );

        if (existingGrade.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É
            await database.run(
                'UPDATE grades SET grade = ?, date = ?, teacher_id = ? WHERE id = ?',
                [grade, date, req.user.teacher_id || req.user.id, existingGrade[0].id]
            );
            
            res.json({
                success: true,
                message: '–û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
            });
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            await database.run(
                `INSERT INTO grades (student_id, subject_id, grade, grade_type, date, teacher_id) 
                 VALUES (?, ?, ?, ?, ?, ?)`,
                [student_id, subject_id, grade, grade_type, date, req.user.teacher_id || req.user.id]
            );
            
            res.json({
                success: true,
                message: '–û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞'
            });
        }

    } catch (error) {
        console.error('Save grade error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
        });
    }
});

// üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/statistics/overview', authenticateToken, async (req, res) => {
    try {
        const studentsCount = await database.query('SELECT COUNT(*) as count FROM students');
        const teachersCount = await database.query('SELECT COUNT(*) as count FROM teachers');
        const subjectsCount = await database.query('SELECT COUNT(*) as count FROM subjects');
        const gradesCount = await database.query('SELECT COUNT(*) as count FROM grades');

        res.json({
            success: true,
            data: {
                students: studentsCount[0].count,
                teachers: teachersCount[0].count,
                subjects: subjectsCount[0].count,
                grades: gradesCount[0].count
            }
        });
    } catch (error) {
        console.error('Statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø
app.get('/api/statistics/groups', authenticateToken, async (req, res) => {
    try {
        const groupsStats = await database.query(`
            SELECT g.id, g.name as group_name, g.specialization,
                   COUNT(s.id) as student_count,
                   AVG(gr.grade) as average_grade,
                   CASE 
                     WHEN COUNT(gr.id) > 0 THEN 
                       (COUNT(CASE WHEN gr.grade >= 3 THEN 1 END) * 100.0 / COUNT(gr.id))
                     ELSE 0 
                   END as success_rate
            FROM groups g
            LEFT JOIN students s ON g.id = s.group_id
            LEFT JOIN grades gr ON s.id = gr.student_id
            GROUP BY g.id, g.name, g.specialization
            ORDER BY average_grade DESC
        `);

        res.json({
            success: true,
            data: groupsStats
        });
    } catch (error) {
        console.error('Groups statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.get('/api/statistics/subjects', authenticateToken, async (req, res) => {
    try {
        const subjectsStats = await database.query(`
            SELECT s.id, s.name as subject_name, s.hours, s.semester,
                   t.name as teacher_name,
                   AVG(g.grade) as average_grade,
                   COUNT(g.id) as grade_count
            FROM subjects s
            LEFT JOIN teachers t ON s.teacher_id = t.id
            LEFT JOIN grades g ON s.id = g.subject_id
            GROUP BY s.id, s.name, s.hours, s.semester, t.name
            ORDER BY average_grade DESC
        `);

        res.json({
            success: true,
            data: subjectsStats
        });
    } catch (error) {
        console.error('Subjects statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤'
        });
    }
});

// üìç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
app.get('/api/statistics/grades-distribution', authenticateToken, async (req, res) => {
    try {
        const gradesDistribution = await database.query(`
            SELECT grade, COUNT(*) as count,
                   (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM grades)) as percentage
            FROM grades
            GROUP BY grade
            ORDER BY grade DESC
        `);

        res.json({
            success: true,
            data: gradesDistribution
        });
    } catch (error) {
        console.error('Grades distribution error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫'
        });
    }
});

// üìç –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/statistics/monthly', authenticateToken, async (req, res) => {
    try {
        const monthlyStats = await database.query(`
            SELECT strftime('%Y-%m', date) as month,
                   AVG(grade) as average_grade,
                   COUNT(*) as grade_count
            FROM grades
            WHERE date IS NOT NULL
            GROUP BY strftime('%Y-%m', date)
            ORDER BY month DESC
            LIMIT 12
        `);

        res.json({
            success: true,
            data: monthlyStats
        });
    } catch (error) {
        console.error('Monthly statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// üìç –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/schedule/student/:studentId', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const student = await database.query(`
            SELECT s.*, g.name as group_name 
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id 
            WHERE s.id = ?
        `, [studentId]);

        if (student.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        const schedule = await database.query(`
            SELECT sch.*, 
                   sub.name as subject_name,
                   t.name as teacher_name,
                   g.name as group_name
            FROM schedule sch
            LEFT JOIN subjects sub ON sch.subject_id = sub.id
            LEFT JOIN teachers t ON sch.teacher_id = t.id
            LEFT JOIN groups g ON sch.group_id = g.id
            WHERE sch.group_id = ?
            ORDER BY sch.day_of_week, sch.start_time
        `, [student[0].group_id]);

        res.json({
            success: true,
            data: {
                student: student[0],
                schedule: schedule
            }
        });

    } catch (error) {
        console.error('Student schedule error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
app.get('/api/schedule/teacher/:teacherId', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const schedule = await database.query(`
            SELECT sch.*, 
                   sub.name as subject_name,
                   g.name as group_name
            FROM schedule sch
            LEFT JOIN subjects sub ON sch.subject_id = sub.id
            LEFT JOIN groups g ON sch.group_id = g.id
            WHERE sch.teacher_id = ?
            ORDER BY sch.day_of_week, sch.start_time
        `, [teacherId]);

        res.json({
            success: true,
            data: schedule
        });

    } catch (error) {
        console.error('Teacher schedule error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
        });
    }
});

// üìç –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/attendance/student/:studentId', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const student = await database.query(`
            SELECT s.*, g.name as group_name 
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id 
            WHERE s.id = ?
        `, [studentId]);

        if (student.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —É–±—Ä–∞–ª–∏ schedule_id
        const attendance = await database.query(`
            SELECT a.*, 
                   sub.name as subject_name,
                   t.name as teacher_name
            FROM attendance a
            LEFT JOIN subjects sub ON a.subject_id = sub.id
            LEFT JOIN teachers t ON sub.teacher_id = t.id
            WHERE a.student_id = ?
            ORDER BY a.date DESC
        `, [studentId]);

        res.json({
            success: true,
            data: {
                student: student[0],
                attendance: attendance
            }
        });

    } catch (error) {
        console.error('Student attendance error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'
        });
    }
});

// üìç –û—Ü–µ–Ω–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–æ—Ü–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–∏–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
app.get('/api/grades/teacher/:teacherId', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const grades = await database.query(`
            SELECT g.*, 
                   s.name as student_name,
                   s.student_card,
                   gr.name as group_name,
                   sub.name as subject_name
            FROM grades g
            LEFT JOIN students s ON g.student_id = s.id
            LEFT JOIN groups gr ON s.group_id = gr.id
            LEFT JOIN subjects sub ON g.subject_id = sub.id
            WHERE g.teacher_id = ?
            ORDER BY g.date DESC
        `, [teacherId]);

        res.json({
            success: true,
            data: grades
        });
    } catch (error) {
        console.error('Get teacher grades error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫'
        });
    }
});

// üìç –°—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Å—Ç—É–¥–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –≤–µ–¥–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
app.get('/api/teacher/:teacherId/students', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const students = await database.query(`
            SELECT DISTINCT s.*, g.name as group_name
            FROM students s
            LEFT JOIN groups g ON s.group_id = g.id
            LEFT JOIN grades gr ON s.id = gr.student_id
            LEFT JOIN subjects sub ON gr.subject_id = sub.id
            WHERE sub.teacher_id = ? OR gr.teacher_id = ?
            ORDER BY s.name
        `, [teacherId, teacherId]);

        res.json({
            success: true,
            data: students
        });
    } catch (error) {
        console.error('Get teacher students error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ
app.get('/api/groups/:groupId/students', authenticateToken, async (req, res) => {
    try {
        const { groupId } = req.params;
        
        const students = await database.query(`
            SELECT s.id, s.name, s.student_card
            FROM students s
            WHERE s.group_id = ?
            ORDER BY s.name
        `, [groupId]);

        res.json({
            success: true,
            data: students
        });

    } catch (error) {
        console.error('Get group students error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã'
        });
    }
});

// üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
app.post('/api/attendance', authenticateToken, async (req, res) => {
    try {
        const { date, subject_id, group_id, attendance_records } = req.body;

        if (!date || !subject_id || !group_id || !attendance_records) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
            });
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        await database.query(`
            DELETE FROM attendance 
            WHERE date = ? AND student_id IN (
                SELECT id FROM students WHERE group_id = ?
            ) AND subject_id = ?
        `, [date, group_id, subject_id]);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for (const record of attendance_records) {
            await database.query(`
                INSERT INTO attendance (student_id, subject_id, date, status, notes)
                VALUES (?, ?, ?, ?, ?)
            `, [record.student_id, subject_id, date, record.status, record.notes || '']);
        }

        res.json({
            success: true,
            message: '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
        });

    } catch (error) {
        console.error('Save attendance error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–µ, –≥—Ä—É–ø–ø–µ –∏ –ø—Ä–µ–¥–º–µ—Ç—É
app.get('/api/attendance/:date/:groupId/:subjectId', authenticateToken, async (req, res) => {
    try {
        const { date, groupId, subjectId } = req.params;
        
        const attendance = await database.query(`
            SELECT a.*, s.name as student_name, s.student_card
            FROM attendance a
            LEFT JOIN students s ON a.student_id = s.id
            WHERE a.date = ? AND s.group_id = ? AND a.subject_id = ?
            ORDER BY s.name
        `, [date, groupId, subjectId]);

        res.json({
            success: true,
            data: attendance
        });

    } catch (error) {
        console.error('Get attendance error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
app.get('/api/teacher/:teacherId/groups', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —É–±—Ä–∞–ª–∏ group_id –∏–∑ subjects
        const groups = await database.query(`
            SELECT DISTINCT g.*
            FROM groups g
            LEFT JOIN students s ON g.id = s.group_id
            LEFT JOIN grades gr ON s.id = gr.student_id
            LEFT JOIN subjects sub ON gr.subject_id = sub.id
            WHERE sub.teacher_id = ? OR gr.teacher_id = ?
            ORDER BY g.name
        `, [teacherId, teacherId]);

        res.json({
            success: true,
            data: groups
        });
    } catch (error) {
        console.error('Get teacher groups error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
app.get('/api/teacher/:teacherId/subjects', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —É–±—Ä–∞–ª–∏ group_id
        const subjects = await database.query(`
            SELECT DISTINCT s.*
            FROM subjects s
            WHERE s.teacher_id = ?
            ORDER BY s.name
        `, [teacherId]);

        res.json({
            success: true,
            data: subjects
        });
    } catch (error) {
        console.error('Get teacher subjects error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤'
        });
    }
});

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
app.get('/api/groups/:groupId/students-with-attendance', authenticateToken, async (req, res) => {
    try {
        const { groupId } = req.params;
        const { date, subjectId } = req.query;
        
        let students = await database.query(`
            SELECT s.id, s.name, s.student_card
            FROM students s
            WHERE s.group_id = ?
            ORDER BY s.name
        `, [groupId]);

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        if (date && subjectId) {
            const attendance = await database.query(`
                SELECT a.* 
                FROM attendance a 
                WHERE a.date = ? AND a.subject_id = ? AND a.student_id IN (
                    SELECT id FROM students WHERE group_id = ?
                )
            `, [date, subjectId, groupId]);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            students = students.map(student => {
                const studentAttendance = attendance.find(a => a.student_id === student.id);
                return {
                    ...student,
                    attendance_id: studentAttendance?.id || null,
                    status: studentAttendance?.status || 'absent',
                    notes: studentAttendance?.notes || ''
                };
            });
        }

        res.json({
            success: true,
            data: students
        });
    } catch (error) {
        console.error('Get group students with attendance error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
        });
    }
});

// üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
app.post('/api/teacher/attendance', authenticateToken, async (req, res) => {
    try {
        const { date, subject_id, group_id, attendance_records } = req.body;

        if (!date || !subject_id || !group_id || !attendance_records) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
            });
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        await database.run(`
            DELETE FROM attendance 
            WHERE date = ? AND subject_id = ? AND student_id IN (
                SELECT id FROM students WHERE group_id = ?
            )
        `, [date, subject_id, group_id]);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for (const record of attendance_records) {
            await database.run(`
                INSERT INTO attendance (student_id, subject_id, date, status, notes)
                VALUES (?, ?, ?, ?, ?)
            `, [record.student_id, subject_id, date, record.status, record.notes || '']);
        }

        res.json({
            success: true,
            message: '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
        });

    } catch (error) {
        console.error('Save teacher attendance error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'
        });
    }
});

// üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/statistics/users', authenticateToken, async (req, res) => {
    try {
        const usersCount = await database.query('SELECT COUNT(*) as count FROM users');
        const studentsCount = await database.query('SELECT COUNT(*) as count FROM students');
        const teachersCount = await database.query('SELECT COUNT(*) as count FROM teachers');
        
        res.json({
            success: true,
            data: {
                users: usersCount[0].count,
                students: studentsCount[0].count,
                teachers: teachersCount[0].count
            }
        });
    } catch (error) {
        console.error('Users statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        });
    }
});

// üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
app.get('/api/teacher/:teacherId/statistics', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        const studentsCount = await database.query(`
            SELECT COUNT(DISTINCT s.id) as count
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id
            LEFT JOIN subjects sub ON g.subject_id = sub.id
            WHERE sub.teacher_id = ? OR g.teacher_id = ?
        `, [teacherId, teacherId]);

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
        const gradesCount = await database.query(`
            SELECT COUNT(*) as count
            FROM grades
            WHERE teacher_id = ?
        `, [teacherId]);

        // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –æ—Ü–µ–Ω–∫–∞–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        const averageGrade = await database.query(`
            SELECT AVG(grade) as average
            FROM grades
            WHERE teacher_id = ?
        `, [teacherId]);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        const subjectsStats = await database.query(`
            SELECT s.name, COUNT(g.id) as grade_count, AVG(g.grade) as average_grade
            FROM subjects s
            LEFT JOIN grades g ON s.id = g.subject_id
            WHERE s.teacher_id = ? AND g.teacher_id = ?
            GROUP BY s.id, s.name
        `, [teacherId, teacherId]);

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
        const gradesDistribution = await database.query(`
            SELECT grade, COUNT(*) as count
            FROM grades
            WHERE teacher_id = ?
            GROUP BY grade
            ORDER BY grade DESC
        `, [teacherId]);

        res.json({
            success: true,
            data: {
                students_count: studentsCount[0]?.count || 0,
                grades_count: gradesCount[0]?.count || 0,
                average_grade: Math.round(averageGrade[0]?.average * 100) / 100 || 0,
                subjects_stats: subjectsStats,
                grades_distribution: gradesDistribution
            }
        });

    } catch (error) {
        console.error('Teacher statistics error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'
        });
    }
});

// üìç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
app.get('/api/teacher/:teacherId/recent-grades', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const recentGrades = await database.query(`
            SELECT g.*, 
                   s.name as student_name,
                   s.student_card,
                   gr.name as group_name,
                   sub.name as subject_name
            FROM grades g
            LEFT JOIN students s ON g.student_id = s.id
            LEFT JOIN groups gr ON s.group_id = gr.id
            LEFT JOIN subjects sub ON g.subject_id = sub.id
            WHERE g.teacher_id = ?
            ORDER BY g.date DESC, g.created_at DESC
            LIMIT 10
        `, [teacherId]);

        res.json({
            success: true,
            data: recentGrades
        });
    } catch (error) {
        console.error('Get teacher recent grades error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫'
        });
    }
});

// üìç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É
app.get('/api/reports/student/:studentId', authenticateTokenFromQuery, async (req, res) => {
    try {
        const { studentId } = req.params;
        const { format = 'html' } = req.query;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (req.user.role === 'student' && req.user.student_id != studentId) {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const studentData = await database.query(`
            SELECT s.*, g.name as group_name 
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id 
            WHERE s.id = ?
        `, [studentId]);

        if (studentData.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const grades = await database.query(`
            SELECT g.*, s.name as subject_name, t.name as teacher_name
            FROM grades g
            LEFT JOIN subjects s ON g.subject_id = s.id
            LEFT JOIN teachers t ON g.teacher_id = t.id
            WHERE g.student_id = ?
            ORDER BY g.date DESC
        `, [studentId]);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        const attendance = await database.query(`
            SELECT a.*, sub.name as subject_name
            FROM attendance a
            LEFT JOIN subjects sub ON a.subject_id = sub.id
            WHERE a.student_id = ?
            ORDER BY a.date DESC
            LIMIT 50
        `, [studentId]);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalGrades = grades.length;
        const averageGrade = totalGrades > 0 
            ? (grades.reduce((sum, grade) => sum + grade.grade, 0) / totalGrades).toFixed(2)
            : 0;

        const attendanceStats = attendance.reduce((stats, record) => {
            if (record.status === 'present') stats.present++;
            else stats.absent++;
            return stats;
        }, { present: 0, absent: 0 });

        const reportData = {
            student: studentData[0],
            grades: grades,
            attendance: attendance,
            statistics: {
                totalGrades: totalGrades,
                averageGrade: averageGrade,
                attendance: attendanceStats,
                attendancePercentage: attendance.length > 0 
                    ? ((attendanceStats.present / attendance.length) * 100).toFixed(1)
                    : 0
            },
            generatedAt: new Date().toLocaleString('ru-RU')
        };

        if (format === 'json') {
            res.json({
                success: true,
                data: reportData
            });
        } else {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            const htmlReport = generateStudentHTMLReport(reportData);
            res.send(htmlReport);
        }

    } catch (error) {
        console.error('Student report error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞'
        });
    }
});

// üìç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≥—Ä—É–ø–ø–µ
app.get('/api/reports/group/:groupId', authenticateTokenFromQuery, async (req, res) => {
    try {
        const { groupId } = req.params;
        const { format = 'html' } = req.query;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        if (req.user.role === 'teacher') {
            const teacherGroups = await database.query(`
                SELECT DISTINCT g.id
                FROM groups g
                LEFT JOIN students s ON g.id = s.group_id
                LEFT JOIN grades gr ON s.id = gr.student_id
                LEFT JOIN subjects sub ON gr.subject_id = sub.id
                WHERE sub.teacher_id = ? OR gr.teacher_id = ?
            `, [req.user.teacher_id, req.user.teacher_id]);

            const hasAccess = teacherGroups.some(group => group.id == groupId);
            if (!hasAccess) {
                return res.status(403).json({
                    success: false,
                    error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
                });
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        const groupData = await database.query('SELECT * FROM groups WHERE id = ?', [groupId]);
        
        if (groupData.length === 0) {
            return res.status(404).json({
                success: false,
                error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
        const students = await database.query(`
            SELECT s.*, 
                   COUNT(g.id) as grades_count,
                   AVG(g.grade) as average_grade
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id
            WHERE s.group_id = ?
            GROUP BY s.id, s.name, s.student_card
            ORDER BY s.name
        `, [groupId]);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–µ
        const groupStats = await database.query(`
            SELECT 
                COUNT(DISTINCT s.id) as total_students,
                COUNT(g.id) as total_grades,
                AVG(g.grade) as group_average,
                COUNT(CASE WHEN g.grade >= 4 THEN 1 END) as good_grades,
                COUNT(CASE WHEN g.grade < 3 THEN 1 END) as bad_grades
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id
            WHERE s.group_id = ?
        `, [groupId]);

        const reportData = {
            group: groupData[0],
            students: students,
            statistics: groupStats[0],
            generatedAt: new Date().toLocaleString('ru-RU')
        };

        if (format === 'json') {
            res.json({
                success: true,
                data: reportData
            });
        } else {
            const htmlReport = generateGroupHTMLReport(reportData);
            res.send(htmlReport);
        }

    } catch (error) {
        console.error('Group report error:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –≥—Ä—É–ø–ø–µ'
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
function generateStudentHTMLReport(data) {
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É - ${data.student.name}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
        .header { border-bottom: 2px solid #007bff; padding-bottom: 10px; margin-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #007bff; color: white; }
        .badge { padding: 4px 8px; border-radius: 4px; color: white; font-size: 12px; }
        .badge-success { background: #28a745; }
        .badge-warning { background: #ffc107; }
        .badge-danger { background: #dc3545; }
        .footer { margin-top: 30px; padding-top: 10px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</h1>
        <h2>–°—Ç—É–¥–µ–Ω—Ç: ${data.student.name}</h2>
        <p>–ì—Ä—É–ø–ø–∞: ${data.student.group_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} | –ó–∞—á–µ—Ç–∫–∞: ${data.student.student_card || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
    </div>

    <div class="section">
        <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div class="stats-grid">
            <div class="stat-card">
                <h4>–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</h4>
                <p style="font-size: 24px; margin: 0; color: #007bff;">${data.statistics.totalGrades}</p>
            </div>
            <div class="stat-card">
                <h4>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</h4>
                <p style="font-size: 24px; margin: 0; color: #28a745;">${data.statistics.averageGrade}</p>
            </div>
            <div class="stat-card">
                <h4>–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å</h4>
                <p style="font-size: 24px; margin: 0; color: #17a2b8;">${data.statistics.attendancePercentage}%</p>
            </div>
        </div>
    </div>

    <div class="section">
        <h3>üìù –û—Ü–µ–Ω–∫–∏</h3>
        ${data.grades.length > 0 ? `
            <table>
                <thead>
                    <tr>
                        <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                        <th>–û—Ü–µ–Ω–∫–∞</th>
                        <th>–¢–∏–ø</th>
                        <th>–î–∞—Ç–∞</th>
                        <th>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</th>
                    </tr>
                </thead>
                <tbody>
                    ${data.grades.map(grade => `
                        <tr>
                            <td>${grade.subject_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                            <td>
                                <span class="badge ${grade.grade >= 4 ? 'badge-success' : grade.grade >= 3 ? 'badge-warning' : 'badge-danger'}">
                                    ${grade.grade}
                                </span>
                            </td>
                            <td>${grade.grade_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                            <td>${new Date(grade.date).toLocaleDateString('ru-RU')}</td>
                            <td>${grade.teacher_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        ` : '<p>–û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç</p>'}
    </div>

    <div class="section">
        <h3>‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)</h3>
        ${data.attendance.length > 0 ? `
            <table>
                <thead>
                    <tr>
                        <th>–î–∞—Ç–∞</th>
                        <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                </thead>
                <tbody>
                    ${data.attendance.map(record => `
                        <tr>
                            <td>${new Date(record.date).toLocaleDateString('ru-RU')}</td>
                            <td>${record.subject_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                            <td>
                                <span class="badge ${record.status === 'present' ? 'badge-success' : 'badge-danger'}">
                                    ${record.status === 'present' ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª' : '–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'}
                                </span>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        ` : '<p>–ó–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–µ—Ç</p>'}
    </div>

    <div class="footer">
        <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${data.generatedAt}</p>
        <p>–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∑–∞—á–µ—Ç–∫–∏</p>
    </div>
</body>
</html>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
function generateGroupHTMLReport(data) {
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ - ${data.group.name}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
        .header { border-bottom: 2px solid #007bff; padding-bottom: 10px; margin-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #007bff; color: white; }
        .footer { margin-top: 30px; padding-top: 10px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ</h1>
        <h2>–ì—Ä—É–ø–ø–∞: ${data.group.name}</h2>
        <p>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${data.group.specialization || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
    </div>

    <div class="section">
        <h3>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã</h3>
        <div class="stats-grid">
            <div class="stat-card">
                <h4>–°—Ç—É–¥–µ–Ω—Ç–æ–≤</h4>
                <p style="font-size: 24px; margin: 0; color: #007bff;">${data.statistics.total_students}</p>
            </div>
            <div class="stat-card">
                <h4>–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</h4>
                <p style="font-size: 24px; margin: 0; color: #28a745;">${data.statistics.total_grades}</p>
            </div>
            <div class="stat-card">
                <h4>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</h4>
                <p style="font-size: 24px; margin: 0; color: #17a2b8;">${Math.round(data.statistics.group_average * 100) / 100 || 0}</p>
            </div>
            <div class="stat-card">
                <h4>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</h4>
                <p style="font-size: 24px; margin: 0; color: #ffc107;">
                    ${data.statistics.total_grades > 0 ? Math.round((data.statistics.good_grades / data.statistics.total_grades) * 100) : 0}%
                </p>
            </div>
        </div>
    </div>

    <div class="section">
        <h3>üéì –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h3>
        ${data.students.length > 0 ? `
            <table>
                <thead>
                    <tr>
                        <th>–°—Ç—É–¥–µ–Ω—Ç</th>
                        <th>–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏</th>
                        <th>–ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫</th>
                        <th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                    </tr>
                </thead>
                <tbody>
                    ${data.students.map(student => `
                        <tr>
                            <td>${student.name}</td>
                            <td>${student.student_card || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                            <td>${student.grades_count || 0}</td>
                            <td>${Math.round(student.average_grade * 100) / 100 || '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        ` : '<p>–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</p>'}
    </div>

    <div class="footer">
        <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${data.generatedAt}</p>
        <p>–°–∏—Å—Ç–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∑–∞—á–µ—Ç–∫–∏</p>
    </div>
</body>
</html>
    `;
}

// üìç –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}`);
});

// üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});