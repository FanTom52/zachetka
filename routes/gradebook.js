// routes/gradebook.js
const express = require('express');
const router = express.Router();
const db = require('../utils/database');
const { authenticateToken, requireTeacherOrAdmin } = require('../middleware/auth');

// üìã –ü–æ–ª—É—á–∏—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è
router.get('/:groupId/:subjectId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { groupId, subjectId } = req.params;
        
        console.log('üîç –ó–∞–ø—Ä–æ—Å –≤–µ–¥–æ–º–æ—Å—Ç–∏:', { groupId, subjectId });
        
        const sql = `
            SELECT 
                s.id as student_id,
                s.name as student_name,
                s.student_card,
                g.grade,
                g.grade_type,
                g.is_pass,
                g.date,
                g.teacher_id,
                gr.name as group_name,
                subj.name as subject_name
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id AND g.subject_id = ?
            JOIN groups gr ON s.group_id = gr.id
            JOIN subjects subj ON subj.id = ?
            WHERE s.group_id = ?
            ORDER BY s.name
        `;
        
        db.all(sql, [subjectId, subjectId, groupId], (err, rows) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–¥–æ–º–æ—Å—Ç–∏:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç–∏'
                });
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã:', rows?.length || 0, '—Å—Ç—É–¥–µ–Ω—Ç–æ–≤');
            
            res.json({
                success: true,
                data: {
                    group: rows[0]?.group_name,
                    subject: rows[0]?.subject_name,
                    students: rows
                }
            });
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

module.exports = router;