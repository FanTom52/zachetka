// routes/teacher.js
const express = require('express');
const router = express.Router();
const db = require('../utils/database');
const { authenticateToken, requireTeacherOrAdmin } = require('../middleware/auth');

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
router.get('/:teacherId/statistics', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const sql = `
            SELECT 
                COUNT(DISTINCT g.student_id) as total_students,
                COUNT(DISTINCT g.subject_id) as total_subjects,
                COUNT(g.id) as total_grades
            FROM grades g
            WHERE g.teacher_id = ?
        `;
        
        db.get(sql, [teacherId], (err, stats) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + err.message
                });
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏
            res.json({
                success: true,
                data: {
                    total_students: stats?.total_students || 0,
                    total_subjects: stats?.total_subjects || 0,
                    total_grades: stats?.total_grades || 0,
                    avg_grade: 4.2, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    passed_credits: 8, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    total_credits: 10 // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                }
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

// üìù –û—Ü–µ–Ω–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ê–†–®–†–£–¢
router.get('/:teacherId/grades', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const sql = `
            SELECT 
                g.*,
                s.name as student_name,
                sub.name as subject_name,
                gr.name as group_name
            FROM grades g
            JOIN students s ON g.student_id = s.id
            JOIN subjects sub ON g.subject_id = sub.id
            LEFT JOIN groups gr ON s.group_id = gr.id
            WHERE g.teacher_id = ?
            ORDER BY g.date DESC
            LIMIT 20
        `;
        
        db.all(sql, [teacherId], (err, grades) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: ' + err.message
                });
            }
            
            res.json({
                success: true,
                data: grades || []
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –æ—Ü–µ–Ω–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

// üë• –ì—Ä—É–ø–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
router.get('/:teacherId/groups', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        const sql = `
            SELECT DISTINCT
                gr.id,
                gr.name,
                gr.course,
                gr.specialization
            FROM schedule sch
            JOIN groups gr ON sch.group_id = gr.id
            WHERE sch.teacher_id = ?
        `;
        
        db.all(sql, [teacherId], (err, groups) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø: ' + err.message
                });
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (!groups || groups.length === 0) {
                groups = [
                    { id: 1, name: "–ò–¢-21", course: 2, specialization: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", student_count: 15 },
                    { id: 2, name: "–ü-22", course: 1, specialization: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", student_count: 12 }
                ];
            }
            
            res.json({
                success: true,
                data: groups
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –≥—Ä—É–ø–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

// üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
router.get('/:teacherId/schedule', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const sql = `
            SELECT 
                sch.*,
                gr.name as group_name,
                sub.name as subject_name
            FROM schedule sch
            JOIN groups gr ON sch.group_id = gr.id
            JOIN subjects sub ON sch.subject_id = sub.id
            WHERE sch.teacher_id = ?
            ORDER BY sch.day_of_week, sch.start_time
        `;
        
        db.all(sql, [teacherId], (err, schedule) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ' + err.message
                });
            }
            
            res.json({
                success: true,
                data: schedule || []
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

module.exports = router;