// routes/session-schedule.js
const express = require('express');
const router = express.Router();
const db = require('../utils/database');
const { authenticateToken, requireTeacherOrAdmin, requireAdmin } = require('../middleware/auth');

// üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ø–æ –µ–≥–æ –≥—Ä—É–ø–ø–µ)
router.get('/student/:studentId', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞
        const studentSql = `SELECT group_id FROM students WHERE id = ?`;
        
        db.get(studentSql, [studentId], (err, student) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞'
                });
            }
            
            if (!student) {
                return res.status(404).json({
                    success: false,
                    error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
            const scheduleSql = `
                SELECT 
                    ss.*,
                    s.name as subject_name,
                    g.name as group_name,
                    t.name as teacher_name
                FROM session_schedule ss
                JOIN subjects s ON ss.subject_id = s.id
                JOIN groups g ON ss.group_id = g.id
                JOIN teachers t ON ss.teacher_id = t.id
                WHERE ss.group_id = ?
                ORDER BY ss.event_date, ss.start_time
            `;
            
            db.all(scheduleSql, [student.group_id], (err, schedule) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', err);
                    return res.status(500).json({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
                    });
                }
                
                res.json({
                    success: true,
                    data: schedule
                });
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
router.get('/teacher/:teacherId', authenticateToken, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const sql = `
            SELECT 
                ss.*,
                s.name as subject_name,
                g.name as group_name,
                t.name as teacher_name
            FROM session_schedule ss
            JOIN subjects s ON ss.subject_id = s.id
            JOIN groups g ON ss.group_id = g.id
            JOIN teachers t ON ss.teacher_id = t.id
            WHERE ss.teacher_id = ?
            ORDER BY ss.event_date, ss.start_time
        `;
        
        db.all(sql, [teacherId], (err, schedule) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
                });
            }
            
            res.json({
                success: true,
                data: schedule
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üìÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/', authenticateToken, requireAdmin, async (req, res) => {
    try {
        const sql = `
            SELECT 
                ss.*,
                s.name as subject_name,
                g.name as group_name,
                t.name as teacher_name
            FROM session_schedule ss
            JOIN subjects s ON ss.subject_id = s.id
            JOIN groups g ON ss.group_id = g.id
            JOIN teachers t ON ss.teacher_id = t.id
            ORDER BY ss.event_date, ss.start_time
        `;
        
        db.all(sql, [], (err, schedule) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
                });
            }
            
            res.json({
                success: true,
                data: schedule
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ –∞–¥–º–∏–Ω—ã)
router.post('/', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { subject_id, group_id, event_type, event_date, start_time, end_time, classroom, notes } = req.body;
        const teacher_id = req.user.teacher_id || req.user.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!subject_id || !group_id || !event_type || !event_date || !start_time || !end_time) {
            return res.status(400).json({
                success: false,
                error: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        const validEventTypes = ['exam', 'test', 'credit', 'consultation'];
        if (!validEventTypes.includes(event_type)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è'
            });
        }

        const sql = `
            INSERT INTO session_schedule 
            (subject_id, group_id, teacher_id, event_type, event_date, start_time, end_time, classroom, notes)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        `;
        
        db.run(sql, [subject_id, group_id, teacher_id, event_type, event_date, start_time, end_time, classroom, notes], function(err) {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
                });
            }
            
            res.json({
                success: true,
                message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                data: { id: this.lastID }
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ –∞–¥–º–∏–Ω—ã)
router.put('/:eventId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { eventId } = req.params;
        const { subject_id, group_id, event_type, event_date, start_time, end_time, classroom, notes } = req.body;
        const teacher_id = req.user.teacher_id || req.user.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
        const checkSql = `SELECT * FROM session_schedule WHERE id = ?`;
        
        db.get(checkSql, [eventId], (err, event) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏—è'
                });
            }

            if (!event) {
                return res.status(404).json({
                    success: false,
                    error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                });
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –µ–º—É
            if (req.user.role !== 'admin' && event.teacher_id !== teacher_id) {
                return res.status(403).json({
                    success: false,
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'
                });
            }

            const updateSql = `
                UPDATE session_schedule 
                SET subject_id = ?, group_id = ?, event_type = ?, event_date = ?, start_time = ?, end_time = ?, classroom = ?, notes = ?
                WHERE id = ?
            `;
            
            db.run(updateSql, [subject_id, group_id, event_type, event_date, start_time, end_time, classroom, notes, eventId], function(err) {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', err);
                    return res.status(500).json({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è'
                    });
                }
                
                res.json({
                    success: true,
                    message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
                });
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ –∞–¥–º–∏–Ω—ã)
router.delete('/:eventId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { eventId } = req.params;
        const teacher_id = req.user.teacher_id || req.user.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
        const checkSql = `SELECT * FROM session_schedule WHERE id = ?`;
        
        db.get(checkSql, [eventId], (err, event) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏—è'
                });
            }

            if (!event) {
                return res.status(404).json({
                    success: false,
                    error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                });
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –µ–º—É
            if (req.user.role !== 'admin' && event.teacher_id !== teacher_id) {
                return res.status(403).json({
                    success: false,
                    error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'
                });
            }

            const deleteSql = `DELETE FROM session_schedule WHERE id = ?`;
            
            db.run(deleteSql, [eventId], function(err) {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', err);
                    return res.status(500).json({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è'
                    });
                }
                
                res.json({
                    success: true,
                    message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
                });
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

module.exports = router;