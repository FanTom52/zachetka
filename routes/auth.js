// routes/auth.js
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const router = express.Router();
const db = require('../utils/database');
const config = require('../config');
const { authenticateToken } = require('../middleware/auth');

// üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
router.post('/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({
                success: false,
                error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sql = `
            SELECT u.*, s.name as student_name, t.name as teacher_name 
            FROM users u 
            LEFT JOIN students s ON u.student_id = s.id 
            LEFT JOIN teachers t ON u.teacher_id = t.id 
            WHERE u.username = ? AND u.is_active = 1
        `;
        
        db.get(sql, [username], async (err, user) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                });
            }
            
            if (!user) {
                return res.status(401).json({
                    success: false,
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            const validPassword = await bcrypt.compare(password, user.password);
            if (!validPassword) {
                return res.status(401).json({
                    success: false,
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            db.run('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?', [user.id]);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = jwt.sign(
                { 
                    id: user.id, 
                    username: user.username, 
                    role: user.role,
                    student_id: user.student_id,
                    teacher_id: user.teacher_id
                },
                config.security.jwtSecret,
                { expiresIn: config.security.jwtExpiresIn }
            );

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            const userResponse = {
                id: user.id,
                username: user.username,
                role: user.role,
                name: user.student_name || user.teacher_name || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                email: user.email
            };

            res.json({
                success: true,
                message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
                token,
                user: userResponse
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üë§ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/me', authenticateToken, async (req, res) => {
    try {
        const sql = `
            SELECT u.*, s.name as student_name, t.name as teacher_name 
            FROM users u 
            LEFT JOIN students s ON u.student_id = s.id 
            LEFT JOIN teachers t ON u.teacher_id = t.id 
            WHERE u.id = ?
        `;
        
        db.get(sql, [req.user.id], (err, user) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                });
            }

            if (!user) {
                return res.status(404).json({
                    success: false,
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            const userResponse = {
                id: user.id,
                username: user.username,
                role: user.role,
                name: user.student_name || user.teacher_name || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                email: user.email,
                student_id: user.student_id,
                teacher_id: user.teacher_id
            };

            res.json({
                success: true,
                data: userResponse
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
router.put('/profile', authenticateToken, async (req, res) => {
    try {
        const { email, currentPassword, newPassword } = req.body;
        const userId = req.user.id;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.get('SELECT * FROM users WHERE id = ?', [userId], async (err, user) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å
            if (newPassword) {
                if (!currentPassword) {
                    return res.status(400).json({
                        success: false,
                        error: '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è'
                    });
                }

                const validPassword = await bcrypt.compare(currentPassword, user.password);
                if (!validPassword) {
                    return res.status(400).json({
                        success: false,
                        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
                    });
                }

                // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                const hashedPassword = await bcrypt.hash(newPassword, config.security.bcryptRounds);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏ email
                db.run(
                    'UPDATE users SET password = ?, email = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
                    [hashedPassword, email, userId],
                    function(err) {
                        if (err) {
                            return res.status(500).json({
                                success: false,
                                error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
                            });
                        }

                        res.json({
                            success: true,
                            message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
                        });
                    }
                );
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ email
                db.run(
                    'UPDATE users SET email = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
                    [email, userId],
                    function(err) {
                        if (err) {
                            return res.status(500).json({
                                success: false,
                                error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
                            });
                        }

                        res.json({
                            success: true,
                            message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
                        });
                    }
                );
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

module.exports = router;