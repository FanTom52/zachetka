// routes/grades.js
const express = require('express');
const router = express.Router();
const db = require('../utils/database');
const { authenticateToken, requireTeacherOrAdmin } = require('../middleware/auth'); // –ò–∑–º–µ–Ω–∏–ª–∏ requireRole –Ω–∞ requireTeacherOrAdmin

// üìä –ü–æ–ª—É—á–∏—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ –≥—Ä—É–ø–ø–µ –∏ –ø—Ä–µ–¥–º–µ—Ç—É
router.get('/gradebook/:groupId/:subjectId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    // –ó–∞–º–µ–Ω–∏–ª–∏ requireRole(['teacher', 'admin']) –Ω–∞ requireTeacherOrAdmin
    try {
        const { groupId, subjectId } = req.params;
        
        const sql = `
            SELECT 
                s.id as student_id,
                s.name as student_name,
                s.student_card,
                g.grade,
                g.grade_type,
                g.is_pass,
                g.date,
                g.teacher_id,
                t.name as teacher_name,
                gr.name as group_name,
                subj.name as subject_name
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id AND g.subject_id = ?
            LEFT JOIN teachers t ON g.teacher_id = t.id
            JOIN groups gr ON s.group_id = gr.id
            JOIN subjects subj ON subj.id = ?
            WHERE s.group_id = ?
            ORDER BY s.name
        `;
        
        db.all(sql, [subjectId, subjectId, groupId], (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–¥–æ–º–æ—Å—Ç–∏:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç–∏'
                });
            }
            
            res.json({
                success: true,
                data: {
                    group: rows[0]?.group_name,
                    subject: rows[0]?.subject_name,
                    students: rows
                }
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
router.post('/', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    // –ó–∞–º–µ–Ω–∏–ª–∏ requireRole(['teacher', 'admin']) –Ω–∞ requireTeacherOrAdmin
    try {
        const { student_id, subject_id, grade, grade_type, date, notes } = req.body;
        const teacher_id = req.user.teacher_id || req.user.id;

        if (!student_id || !subject_id || !grade || !date) {
            return res.status(400).json({
                success: false,
                error: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            });
        }

        // –î–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–∫–∏
        if (grade_type === 'exam' && (grade < 2 || grade > 5)) {
            return res.status(400).json({
                success: false,
                error: '–û—Ü–µ–Ω–∫–∞ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2 –¥–æ 5'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        const checkSql = `SELECT id FROM grades WHERE student_id = ? AND subject_id = ? AND grade_type = ?`;
        
        db.get(checkSql, [student_id, subject_id, grade_type], (err, existing) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏'
                });
            }

            if (existing) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                const updateSql = `UPDATE grades SET grade = ?, date = ?, teacher_id = ?, notes = ? WHERE id = ?`;
                db.run(updateSql, [grade, date, teacher_id, notes, existing.id], function(err) {
                    if (err) {
                        return res.status(500).json({
                            success: false,
                            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
                        });
                    }
                    
                    res.json({
                        success: true,
                        message: '–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                        data: { id: existing.id }
                    });
                });
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                const insertSql = `INSERT INTO grades (student_id, subject_id, grade, grade_type, date, teacher_id, notes) 
                                 VALUES (?, ?, ?, ?, ?, ?, ?)`;
                db.run(insertSql, [student_id, subject_id, grade, grade_type, date, teacher_id, notes], function(err) {
                    if (err) {
                        return res.status(500).json({
                            success: false,
                            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
                        });
                    }
                    
                    res.json({
                        success: true,
                        message: '–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                        data: { id: this.lastID }
                    });
                });
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—á—ë—Ç - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
router.post('/credit', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { student_id, subject_id, is_pass, grade_type, date, notes, grade } = req.body;
        const teacher_id = req.user.teacher_id || req.user.id;

        console.log('üîç DEBUG - –î–∞–Ω–Ω—ã–µ –∑–∞—á—ë—Ç–∞:', { 
            student_id, 
            subject_id, 
            is_pass, 
            grade_type, 
            date, 
            notes, 
            grade,
            teacher_id 
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!student_id || !subject_id || !grade_type || !date) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: —Å—Ç—É–¥–µ–Ω—Ç, –ø—Ä–µ–¥–º–µ—Ç, —Ç–∏–ø –∑–∞—á—ë—Ç–∞ –∏ –¥–∞—Ç–∞'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞—á—ë—Ç–∞
        if (grade_type !== 'test' && grade_type !== 'credit') {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞—á—ë—Ç–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: test, credit'
            });
        }

        let insertSql, params;

        // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞—á—ë—Ç–∞
        if (grade_type === 'test') {
            if (is_pass === undefined || is_pass === null) {
                return res.status(400).json({
                    success: false,
                    error: '–î–ª—è –∑–∞—á—ë—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∑–∞—á—ë—Ç/–Ω–µ–∑–∞—á—ë—Ç)'
                });
            }
            
            insertSql = `INSERT INTO grades (student_id, subject_id, is_pass, grade_type, date, teacher_id, notes) 
                         VALUES (?, ?, ?, ?, ?, ?, ?)`;
            params = [student_id, subject_id, is_pass, grade_type, date, teacher_id, notes || ''];
        } 
        // –î–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞—á—ë—Ç–∞
        else if (grade_type === 'credit') {
            if (!grade) {
                return res.status(400).json({
                    success: false,
                    error: '–î–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞—á—ë—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É'
                });
            }
            if (grade < 2 || grade > 5) {
                return res.status(400).json({
                    success: false,
                    error: '–û—Ü–µ–Ω–∫–∞ –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞—á—ë—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 5'
                });
            }
            
            insertSql = `INSERT INTO grades (student_id, subject_id, grade, grade_type, date, teacher_id, notes) 
                         VALUES (?, ?, ?, ?, ?, ?, ?)`;
            params = [student_id, subject_id, grade, grade_type, date, teacher_id, notes || ''];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        const checkSql = `SELECT id FROM grades WHERE student_id = ? AND subject_id = ? AND grade_type = ?`;
        
        db.get(checkSql, [student_id, subject_id, grade_type], (err, existing) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏: ' + err.message
                });
            }

            if (existing) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                let updateSql, updateParams;
                
                if (grade_type === 'credit') {
                    updateSql = `UPDATE grades SET grade = ?, date = ?, teacher_id = ?, notes = ? WHERE id = ?`;
                    updateParams = [grade, date, teacher_id, notes || '', existing.id];
                } else {
                    updateSql = `UPDATE grades SET is_pass = ?, date = ?, teacher_id = ?, notes = ? WHERE id = ?`;
                    updateParams = [is_pass, date, teacher_id, notes || '', existing.id];
                }
                
                db.run(updateSql, updateParams, function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—á—ë—Ç–∞:', err);
                        return res.status(500).json({
                            success: false,
                            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—á—ë—Ç–∞: ' + err.message
                        });
                    }
                    
                    res.json({
                        success: true,
                        message: '–ó–∞—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω',
                        data: { id: existing.id }
                    });
                });
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                db.run(insertSql, params, function(err) {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—á—ë—Ç–∞:', err);
                        return res.status(500).json({
                            success: false,
                            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—á—ë—Ç–∞: ' + err.message
                        });
                    }
                    
                    res.json({
                        success: true,
                        message: '–ó–∞—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
                        data: { id: this.lastID }
                    });
                });
            }
        });
        
    } catch (error) {
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—á—ë—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

// üìù –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
router.get('/teacher/:teacherId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { teacherId } = req.params;
        
        const sql = `
            SELECT 
                g.*,
                s.name as student_name,
                sub.name as subject_name,
                gr.name as group_name
            FROM grades g
            JOIN students s ON g.student_id = s.id
            JOIN subjects sub ON g.subject_id = sub.id
            LEFT JOIN groups gr ON s.group_id = gr.id
            WHERE g.teacher_id = ?
            ORDER BY g.date DESC
            LIMIT 20
        `;
        
        db.all(sql, [teacherId], (err, grades) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫'
                });
            }
            
            res.json({
                success: true,
                data: grades || []
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –æ—Ü–µ–Ω–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∏ –∑–∞—á—ë—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
router.get('/student/:studentId', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        const sql = `
            SELECT 
                g.*,
                s.name as subject_name,
                t.name as teacher_name,
                gr.name as group_name,
                st.name as student_name
            FROM grades g
            JOIN subjects s ON g.subject_id = s.id
            LEFT JOIN teachers t ON g.teacher_id = t.id
            JOIN students st ON g.student_id = st.id
            LEFT JOIN groups gr ON st.group_id = gr.id
            WHERE g.student_id = ?
            ORDER BY g.date DESC
        `;
        
        db.all(sql, [studentId], (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
                });
            }
            
            res.json({
                success: true,
                data: rows
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –æ—Ü–µ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É/–∑–∞—á—ë—Ç
router.delete('/:gradeId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { gradeId } = req.params;
        const teacherId = req.user.teacher_id || req.user.id;

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ü–µ–Ω–∫–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
        const checkSql = `SELECT * FROM grades WHERE id = ? AND teacher_id = ?`;
        
        db.get(checkSql, [gradeId, teacherId], (err, grade) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ü–µ–Ω–∫–∏'
                });
            }

            if (!grade) {
                return res.status(404).json({
                    success: false,
                    error: '–û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è'
                });
            }

            // –£–¥–∞–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
            const deleteSql = `DELETE FROM grades WHERE id = ?`;
            db.run(deleteSql, [gradeId], function(err) {
                if (err) {
                    return res.status(500).json({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
                    });
                }
                
                res.json({
                    success: true,
                    message: '–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
                });
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üêõ –û–¢–õ–ê–î–û–ß–ù–´–ô –ú–ê–†–®–†–£–¢ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
router.get('/debug-test', (req, res) => {
    console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç /api/grades/debug-test —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    res.json({ 
        success: true, 
        message: '–ú–∞—Ä—à—Ä—É—Ç grades —Ä–∞–±–æ—Ç–∞–µ—Ç',
        timestamp: new Date().toISOString()
    });
});

// üêõ –û–¢–õ–ê–î–û–ß–ù–´–ô –ú–ê–†–®–†–£–¢ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
router.post('/debug', authenticateToken, (req, res) => {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', req.body);
    console.log('üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏:', req.headers);
    
    res.json({
        success: true,
        received: req.body,
        message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    });
});

// üìù –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
router.get('/:gradeId', authenticateToken, async (req, res) => {
    try {
        const { gradeId } = req.params;
        
        const sql = `
            SELECT 
                g.*,
                s.name as student_name,
                sub.name as subject_name,
                t.name as teacher_name,
                gr.name as group_name
            FROM grades g
            JOIN students s ON g.student_id = s.id
            JOIN subjects sub ON g.subject_id = sub.id
            LEFT JOIN teachers t ON g.teacher_id = t.id
            LEFT JOIN groups gr ON s.group_id = gr.id
            WHERE g.id = ?
        `;
        
        db.get(sql, [gradeId], (err, grade) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏'
                });
            }
            
            if (!grade) {
                return res.status(404).json({
                    success: false,
                    error: '–û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }
            
            res.json({
                success: true,
                data: grade
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
router.put('/:gradeId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { gradeId } = req.params;
        const { grade, is_pass, date, notes } = req.body;
        const teacherId = req.user.teacher_id || req.user.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ü–µ–Ω–∫–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
        const checkSql = `SELECT * FROM grades WHERE id = ? AND teacher_id = ?`;
        
        db.get(checkSql, [gradeId, teacherId], (err, existingGrade) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ü–µ–Ω–∫–∏'
                });
            }

            if (!existingGrade) {
                return res.status(404).json({
                    success: false,
                    error: '–û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
                });
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            let updateFields = [];
            let updateValues = [];

            if (grade !== undefined) {
                updateFields.push('grade = ?');
                updateValues.push(grade);
            }

            if (is_pass !== undefined) {
                updateFields.push('is_pass = ?');
                updateValues.push(is_pass);
            }

            if (date) {
                updateFields.push('date = ?');
                updateValues.push(date);
            }

            if (notes !== undefined) {
                updateFields.push('notes = ?');
                updateValues.push(notes);
            }

            if (updateFields.length === 0) {
                return res.status(400).json({
                    success: false,
                    error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
                });
            }

            updateValues.push(gradeId);

            const updateSql = `UPDATE grades SET ${updateFields.join(', ')} WHERE id = ?`;
            
            db.run(updateSql, updateValues, function(err) {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', err);
                    return res.status(500).json({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏'
                    });
                }
                
                res.json({
                    success: true,
                    message: '–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                    data: { id: gradeId }
                });
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

module.exports = router;