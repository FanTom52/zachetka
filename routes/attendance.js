// routes/attendance.js
const express = require('express');
const router = express.Router();
const db = require('../utils/database');
const { authenticateToken, requireTeacherOrAdmin } = require('../middleware/auth');

// üìä –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
router.get('/student/:studentId', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        const sql = `
            SELECT 
                a.*,
                s.name as subject_name,
                t.name as teacher_name,
                gr.name as group_name
            FROM attendance a
            JOIN subjects s ON a.subject_id = s.id
            JOIN teachers t ON a.teacher_id = t.id
            JOIN students st ON a.student_id = st.id
            JOIN groups gr ON st.group_id = gr.id
            WHERE a.student_id = ?
            ORDER BY a.date DESC
        `;
        
        db.all(sql, [studentId], (err, attendance) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'
                });
            }
            
            res.json({
                success: true,
                data: attendance
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üìä –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –ø–æ –≥—Ä—É–ø–ø–µ –∏ –ø—Ä–µ–¥–º–µ—Ç—É (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)
router.get('/group/:groupId/subject/:subjectId', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        const { groupId, subjectId } = req.params;
        const { date } = req.query;
        
        let sql = `
            SELECT 
                s.id as student_id,
                s.name as student_name,
                s.student_card,
                a.status,
                a.notes,
                a.date
            FROM students s
            LEFT JOIN attendance a ON s.id = a.student_id AND a.subject_id = ? AND a.date = ?
            WHERE s.group_id = ?
            ORDER BY s.name
        `;
        
        db.all(sql, [subjectId, date, groupId], (err, students) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'
                });
            }
            
            res.json({
                success: true,
                data: {
                    students: students,
                    date: date
                }
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});



// üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
router.get('/student/:studentId/statistics', authenticateToken, async (req, res) => {
    try {
        const { studentId } = req.params;
        
        const sql = `
            SELECT 
                status,
                COUNT(*) as count
            FROM attendance 
            WHERE student_id = ?
            GROUP BY status
        `;
        
        db.all(sql, [studentId], (err, stats) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
                });
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            const total = stats.reduce((sum, item) => sum + item.count, 0);
            const statistics = {
                total: total,
                by_status: stats,
                present_percentage: total > 0 ? Math.round((stats.find(s => s.status === 'present')?.count || 0) / total * 100) : 0,
                absent_percentage: total > 0 ? Math.round((stats.find(s => s.status === 'absent')?.count || 0) / total * 100) : 0
            };
            
            res.json({
                success: true,
                data: statistics
            });
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üß™ –¢–ï–°–¢–û–í–´–ô –ú–ê–†–®–†–£–¢ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
router.get('/test', (req, res) => {
    console.log('‚úÖ TEST ENDPOINT - –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å');
    res.json({
        success: true,
        message: 'Attendance API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString()
    });
});

// ‚ûï –û–°–ù–û–í–ù–û–ô –†–ê–ë–û–ß–ò–ô ENDPOINT - –î–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
router.post('/bulk', authenticateToken, requireTeacherOrAdmin, async (req, res) => {
    try {
        console.log('üéØ BULK MAIN - –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å');
        
        const { subject_id, group_id, date, attendance_data } = req.body;
        const teacher_id = req.user.teacher_id || req.user.id;

        console.log('üéØ BULK MAIN - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
            subject_id, group_id, date, teacher_id,
            attendance_count: attendance_data?.length || 0
        });

        if (!subject_id || !group_id || !date || !attendance_data) {
            return res.status(400).json({
                success: false,
                error: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            });
        }

        let successCount = 0;
        let errorCount = 0;

        // –†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º teacher_id –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for (const attendance of attendance_data) {
            try {
                if (attendance.status) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT —Å teacher_id
                    const insertSql = `INSERT INTO attendance (student_id, subject_id, teacher_id, date, status, notes) VALUES (?, ?, ?, ?, ?, ?)`;
                    
                    await new Promise((resolve, reject) => {
                        db.run(insertSql, [
                            attendance.student_id, 
                            subject_id, 
                            teacher_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º teacher_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                            date, 
                            attendance.status, 
                            attendance.notes || ''
                        ], function(err) {
                            if (err) {
                                console.error(`‚ùå BULK MAIN - –û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${attendance.student_id}:`, err);
                                reject(err);
                            } else {
                                console.log(`‚úÖ BULK MAIN - –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${attendance.student_id}`);
                                resolve();
                            }
                        });
                    });
                    successCount++;
                }
            } catch (error) {
                errorCount++;
                console.error(`‚ùå BULK MAIN - –û—à–∏–±–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${attendance.student_id}:`, error);
            }
        }

        console.log(`üìä BULK MAIN - –ò—Ç–æ–≥: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);

        res.json({
            success: true,
            message: `–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${successCount} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: ${errorCount}`,
            data: {
                saved: successCount,
                errors: errorCount
            }
        });
        
    } catch (error) {
        console.error('‚ùå BULK MAIN - –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message
        });
    }
});

module.exports = router;