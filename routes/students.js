// routes/students.js
const express = require('express');
const router = express.Router();
const db = require('../utils/database');
const { authenticateToken, requireRole, requirePermission } = require('../middleware/auth');

// üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
router.get('/', authenticateToken, requirePermission('view_students'), async (req, res) => {
    try {
        const { group, search, page = 1, limit = 20 } = req.query;
        
        let sql = `
            SELECT s.*, g.name as group_name, g.specialization
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id 
            WHERE 1=1
        `;
        const params = [];

        if (group) {
            sql += ' AND s.group_id = ?';
            params.push(group);
        }

        if (search) {
            sql += ' AND (s.name LIKE ? OR s.student_card LIKE ? OR s.email LIKE ?)';
            const searchTerm = `%${search}%`;
            params.push(searchTerm, searchTerm, searchTerm);
        }

        sql += ' ORDER BY s.name LIMIT ? OFFSET ?';
        params.push(parseInt(limit), (parseInt(page) - 1) * parseInt(limit));

        db.all(sql, params, (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            let countSql = 'SELECT COUNT(*) as total FROM students WHERE 1=1';
            const countParams = [];
            
            if (group) {
                countSql += ' AND group_id = ?';
                countParams.push(group);
            }

            db.get(countSql, countParams, (countErr, countRow) => {
                if (countErr) {
                    return res.status(500).json({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
                    });
                }

                res.json({
                    success: true,
                    data: {
                        students: rows,
                        pagination: {
                            total: countRow.total,
                            page: parseInt(page),
                            limit: parseInt(limit),
                            pages: Math.ceil(countRow.total / parseInt(limit))
                        }
                    }
                });
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
router.post('/', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { name, group_id, student_card, email, phone, birth_date } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!name || !group_id || !student_card) {
            return res.status(400).json({
                success: false,
                error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–ò–û, –≥—Ä—É–ø–ø–∞, –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞
        db.get('SELECT id FROM students WHERE student_card = ?', [student_card], (err, existing) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
                });
            }

            if (existing) {
                return res.status(400).json({
                    success: false,
                    error: '–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –±–∏–ª–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            const sql = `INSERT INTO students (name, group_id, student_card, email, phone, birth_date) 
                        VALUES (?, ?, ?, ?, ?, ?)`;
            
            db.run(sql, [name, group_id, student_card, email, phone, birth_date], function(err) {
                if (err) {
                    return res.status(500).json({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞'
                    });
                }

                res.json({
                    success: true,
                    message: '–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
                    data: { id: this.lastID }
                });
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üë§ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
router.get('/:id', authenticateToken, async (req, res) => {
    try {
        const studentId = req.params.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (req.user.role === 'student' && req.user.student_id != studentId) {
            return res.status(403).json({
                success: false,
                error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
            });
        }

        const sql = `
            SELECT s.*, g.name as group_name, g.specialization, g.course
            FROM students s 
            LEFT JOIN groups g ON s.group_id = g.id 
            WHERE s.id = ?
        `;

        db.get(sql, [studentId], (err, student) => {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞'
                });
            }

            if (!student) {
                return res.status(404).json({
                    success: false,
                    error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            res.json({
                success: true,
                data: student
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

module.exports = router;