// routes/groups.js
const express = require('express');
const router = express.Router();
const db = require('../utils/database');
const { authenticateToken, requireRole } = require('../middleware/auth');

// üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
router.get('/', authenticateToken, async (req, res) => {
    try {
        const sql = `SELECT * FROM groups ORDER BY name`;
        
        db.all(sql, (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø'
                });
            }

            res.json({
                success: true,
                data: rows
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ –≥—Ä—É–ø–ø:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
router.post('/', authenticateToken, requireRole(['admin']), async (req, res) => {
    try {
        const { name, course, specialization } = req.body;

        if (!name || !course) {
            return res.status(400).json({
                success: false,
                error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—É—Ä—Å –≥—Ä—É–ø–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }

        const sql = `INSERT INTO groups (name, course, specialization) VALUES (?, ?, ?)`;
        
        db.run(sql, [name, course, specialization], function(err) {
            if (err) {
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã'
                });
            }

            res.json({
                success: true,
                message: '–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                data: { id: this.lastID }
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
router.get('/:id/statistics', authenticateToken, async (req, res) => {
    try {
        const groupId = req.params.id;

        const sql = `
            SELECT 
                COUNT(DISTINCT s.id) as total_students,
                COUNT(g.id) as total_grades,
                ROUND(AVG(g.grade), 2) as average_grade,
                COUNT(CASE WHEN g.grade = 5 THEN 1 END) as excellent_count,
                COUNT(CASE WHEN g.grade = 4 THEN 1 END) as good_count,
                COUNT(CASE WHEN g.grade = 3 THEN 1 END) as satisfactory_count,
                COUNT(CASE WHEN g.grade = 2 THEN 1 END) as fail_count
            FROM students s
            LEFT JOIN grades g ON s.id = g.student_id
            WHERE s.group_id = ?
        `;
        
        db.get(sql, [groupId], (err, stats) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã:', err);
                return res.status(500).json({
                    success: false,
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
                });
            }

            res.json({
                success: true,
                data: stats
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

module.exports = router;