const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');

class Database {
    constructor() {
        this.db = new sqlite3.Database('./gradebook.db', (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
            } else {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                this.initializeDatabase();
            }
        });
    }

    async query(sql, params = []) {
        return new Promise((resolve, reject) => {
            this.db.all(sql, params, (err, rows) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞:', err);
                    reject(err);
                } else {
                    resolve(rows);
                }
            });
        });
    }

    async run(sql, params = []) {
        return new Promise((resolve, reject) => {
            this.db.run(sql, params, function(err) {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', err);
                    reject(err);
                } else {
                    resolve({ 
                        insertId: this.lastID, 
                        changes: this.changes 
                    });
                }
            });
        });
    }

    async initializeDatabase() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            await this.createTables();
            
            // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await this.populateTestData();
            
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    async createTables() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        await this.run('DROP TABLE IF EXISTS attendance');
        await this.run('DROP TABLE IF EXISTS schedule');
        
        const tables = [
            // –¢–∞–±–ª–∏—Ü–∞ –≥—Ä—É–ø–ø
            `CREATE TABLE IF NOT EXISTS groups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                course INTEGER NOT NULL,
                specialization TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            `CREATE TABLE IF NOT EXISTS students (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                group_id INTEGER,
                student_card TEXT UNIQUE,
                email TEXT,
                phone TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (group_id) REFERENCES groups(id)
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            `CREATE TABLE IF NOT EXISTS teachers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT UNIQUE,
                department TEXT,
                position TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            `CREATE TABLE IF NOT EXISTS subjects (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                hours INTEGER,
                semester INTEGER,
                teacher_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (teacher_id) REFERENCES teachers(id)
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫ –∏ –∑–∞—á—ë—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
`CREATE TABLE IF NOT EXISTS grades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER,
    subject_id INTEGER,
    grade INTEGER CHECK(grade BETWEEN 2 AND 5 OR grade IS NULL),
    is_pass INTEGER CHECK(is_pass IN (0, 1)),
    grade_type TEXT NOT NULL CHECK(grade_type IN ('exam', 'test', 'credit', 'coursework', 'practice')),
    date TEXT NOT NULL,
    teacher_id INTEGER,
    notes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (subject_id) REFERENCES subjects(id),
    FOREIGN KEY (teacher_id) REFERENCES teachers(id),
    UNIQUE(student_id, subject_id, grade_type)
)`,

            // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            `CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                role TEXT NOT NULL CHECK(role IN ('student', 'teacher', 'admin')),
                student_id INTEGER,
                teacher_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES students(id),
                FOREIGN KEY (teacher_id) REFERENCES teachers(id)
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            `CREATE TABLE IF NOT EXISTS schedule (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                group_id INTEGER,
                subject_id INTEGER,
                teacher_id INTEGER,
                day_of_week INTEGER NOT NULL CHECK(day_of_week BETWEEN 1 AND 6),
                start_time TEXT NOT NULL,
                end_time TEXT NOT NULL,
                classroom TEXT,
                lesson_type TEXT CHECK(lesson_type IN ('lecture', 'practice', 'lab', 'seminar')),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (group_id) REFERENCES groups(id),
                FOREIGN KEY (subject_id) REFERENCES subjects(id),
                FOREIGN KEY (teacher_id) REFERENCES teachers(id)
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ schedule_id)
            `CREATE TABLE IF NOT EXISTS attendance (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER,
                subject_id INTEGER,
                date TEXT NOT NULL,
                status TEXT NOT NULL CHECK(status IN ('present', 'absent', 'late', 'sick')),
                notes TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES students(id),
                FOREIGN KEY (subject_id) REFERENCES subjects(id)
            )`
        ];

        for (const tableSql of tables) {
            await this.run(tableSql);
        }
        
        console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
    }

    async populateTestData() {
        console.log('üì• –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        
        // –ì—Ä—É–ø–ø—ã
        const groupsData = [
            ['–ò–¢-21', 2, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'],
            ['–ü-22', 1, '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            ['–ö-21', 2, '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏']
        ];

        for (const group of groupsData) {
            await this.run(
                'INSERT OR IGNORE INTO groups (name, course, specialization) VALUES (?, ?, ?)',
                group
            );
        }
        console.log('‚úÖ –ì—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
        const teachersData = [
            ['–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞', 'ivanova@tech.ru', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'],
            ['–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á', 'petrov@tech.ru', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', '–î–æ—Ü–µ–Ω—Ç'],
            ['–°–∏–¥–æ—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', 'sidorova@tech.ru', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä']
        ];

        for (const teacher of teachersData) {
            await this.run(
                'INSERT OR IGNORE INTO teachers (name, email, department, position) VALUES (?, ?, ?, ?)',
                teacher
            );
        }
        console.log('‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –°—Ç—É–¥–µ–Ω—Ç—ã
        const studentsData = [
            ['–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á', 1, '–°–¢-001', 'ivanov@student.tech.ru', '+79161234567'],
            ['–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', 1, '–°–¢-002', 'petrova@student.tech.ru', '+79161234568'],
            ['–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤–∏—á', 2, '–°–¢-003', 'sidorov@student.tech.ru', '+79161234569'],
            ['–ö–æ–∑–ª–æ–≤–∞ –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞', 2, '–°–¢-004', 'kozlova@student.tech.ru', '+79161234570']
        ];

        for (const student of studentsData) {
            await this.run(
                'INSERT OR IGNORE INTO students (name, group_id, student_card, email, phone) VALUES (?, ?, ?, ?, ?)',
                student
            );
        }
        console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –ü—Ä–µ–¥–º–µ—Ç—ã
        const subjectsData = [
            ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python', 120, 1, 1],
            ['–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 90, 1, 2],
            ['–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 150, 1, 3],
            ['–í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 80, 2, 1]
        ];

        for (const subject of subjectsData) {
            await this.run(
                'INSERT OR IGNORE INTO subjects (name, hours, semester, teacher_id) VALUES (?, ?, ?, ?)',
                subject
            );
        }
        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const hashedAdminPassword = await bcrypt.hash('admin123', 10);
        const hashedTeacherPassword = await bcrypt.hash('teacher123', 10);
        const hashedStudentPassword = await bcrypt.hash('student123', 10);

        const usersData = [
            ['admin', hashedAdminPassword, 'admin', null, null],
            ['teacher', hashedTeacherPassword, 'teacher', null, 1],
            ['student', hashedStudentPassword, 'student', 1, null]
        ];

        for (const user of usersData) {
            await this.run(
                'INSERT OR IGNORE INTO users (username, password, role, student_id, teacher_id) VALUES (?, ?, ?, ?, ?)',
                user
            );
        }
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        const scheduleData = [
            [1, 1, 1, 1, '09:00', '10:30', '–ê-101', 'lecture'],
            [1, 2, 2, 1, '10:45', '12:15', '–ë-201', 'practice'],
            [1, 3, 3, 2, '09:00', '10:30', '–ê-102', 'lecture'],
            [2, 1, 1, 3, '10:45', '12:15', '–õ-301', 'lab']
        ];

        for (const lesson of scheduleData) {
            await this.run(
                `INSERT OR IGNORE INTO schedule (group_id, subject_id, teacher_id, day_of_week, start_time, end_time, classroom, lesson_type) 
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
                lesson
            );
        }
        console.log('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');

        // –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        const attendanceData = [
            [1, 1, '2024-01-15', 'present', ''],
            [1, 2, '2024-01-15', 'late', '–û–ø–æ–∑–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç'],
            [2, 1, '2024-01-15', 'present', ''],
            [3, 3, '2024-01-16', 'sick', '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π']
        ];

        for (const record of attendanceData) {
            await this.run(
                `INSERT OR IGNORE INTO attendance (student_id, subject_id, date, status, notes) 
                 VALUES (?, ?, ?, ?, ?)`,
                record
            );
        }
        console.log('‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');

        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    }
}

module.exports = new Database();