// utils/backup.js
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const config = require('../config');

class BackupManager {
    constructor() {
        this.backupPath = config.database.backupPath;
        this.ensureBackupDirectory();
    }

    ensureBackupDirectory() {
        if (!fs.existsSync(this.backupPath)) {
            fs.mkdirSync(this.backupPath, { recursive: true });
        }
    }

    async createBackup() {
        return new Promise((resolve, reject) => {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupFile = path.join(this.backupPath, `backup-${timestamp}.db`);
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            fs.copyFile(config.database.path, backupFile, (err) => {
                if (err) {
                    reject(err);
                } else {
                    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
                    resolve(backupFile);
                }
            });
        });
    }

    async restoreBackup(backupFile) {
        return new Promise((resolve, reject) => {
            if (!fs.existsSync(backupFile)) {
                reject(new Error('–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                return;
            }

            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            const currentBackup = path.join(this.backupPath, `pre-restore-${Date.now()}.db`);
            fs.copyFile(config.database.path, currentBackup, (err) => {
                if (err) {
                    reject(err);
                    return;
                }

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                fs.copyFile(backupFile, config.database.path, (err) => {
                    if (err) {
                        reject(err);
                    } else {
                        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: ${backupFile}`);
                        resolve();
                    }
                });
            });
        });
    }

    listBackups() {
        try {
            const files = fs.readdirSync(this.backupPath)
                .filter(file => file.endsWith('.db'))
                .map(file => {
                    const filePath = path.join(this.backupPath, file);
                    const stats = fs.statSync(filePath);
                    return {
                        name: file,
                        path: filePath,
                        size: stats.size,
                        created: stats.birthtime
                    };
                })
                .sort((a, b) => b.created - a.created);

            return files;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:', error);
            return [];
        }
    }

    async cleanupOldBackups(maxBackups = 10) {
        const backups = this.listBackups();
        
        if (backups.length > maxBackups) {
            const toDelete = backups.slice(maxBackups);
            
            for (const backup of toDelete) {
                try {
                    fs.unlinkSync(backup.path);
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backup.name}`);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ ${backup.name}:`, error);
                }
            }
        }
    }
}

module.exports = new BackupManager();